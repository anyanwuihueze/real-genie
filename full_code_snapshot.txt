
==================================================
File: .env
==================================================


==================================================
File: .vscode/settings.json
==================================================
{
    "IDX.aI.enableInlineCompletion": true,
    "IDX.aI.enableCodebaseIndexing": true
}


==================================================
File: README.md
==================================================
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.


==================================================
File: components.json
==================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


==================================================
File: next-env.d.ts
==================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


==================================================
File: next.config.ts
==================================================
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
  experimental: {
    allowedDevOrigins: [
      "9003-idx-studio-1746566940513.cluster-l6vkdperq5ebaqo3qy4ksvoqom.cloudworkstations.dev"
    ]
  }
};

export default nextConfig;


==================================================
File: package.json
==================================================
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9003",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.6.2",
    "@genkit-ai/next": "^1.6.2",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@tanstack-query-firebase/react": "^1.0.5",
    "@tanstack/react-query": "^5.66.0",
    "axios": "^1.7.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "firebase": "^11.3.0",
    "genkit": "^1.6.2",
    "lucide-react": "^0.475.0",
    "next": "15.2.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.6.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


==================================================
File: src/ai/dev.ts
==================================================

import { config } from 'dotenv';
config();

import '@/ai/flows/visa-recommendation.ts';
import '@/ai/flows/web-content-extractor.ts';
import '@/ai/flows/general-chat-flow.ts';



==================================================
File: src/ai/flows/general-chat-flow.ts
==================================================

'use server';
/**
 * @fileOverview AI flow for general conversation with Japa Genie, capable of providing visa recommendations and fetching web information.
 *
 * - generalChat - A function that handles conversational chat, can provide visa recommendations, and can fetch web information.
 * - GeneralChatInput - The input type for the generalChat function.
 * - GeneralChatOutput - The return type for the generalChat function.
 */

import {ai} from '@/ai/genkit';
import {z}
from 'genkit';
import {getVisaOptions, type VisaOption} from '@/services/visa-options';
import {extractWebContent, type WebContentExtractorInput, type WebContentExtractorOutput} from '@/ai/flows/web-content-extractor';

// Define Zod schema for chat history parts
const ChatMessagePartSchema = z.object({
  text: z.string(),
});

// Define Zod schema for a single chat message (user or model)
const ChatMessageSchema = z.object({
  role: z.enum(['user', 'model']),
  parts: z.array(ChatMessagePartSchema),
});

const GeneralChatInputSchema = z.object({
  chatHistory: z.array(ChatMessageSchema).describe('The history of the conversation so far.'),
  currentMessage: z.string().describe('The latest message from the user.'),
});
export type GeneralChatInput = z.infer<typeof GeneralChatInputSchema>;

const VisaRecommendationSchemaForOutput = z.object({
    name: z.string(),
    cost: z.object({ usd: z.number() }),
    requirements: z.object({ minimumEducation: z.string(), minimumWorkExperience: z.string() }),
    processingTime: z.string(),
    successRate: z.number().describe('The estimated success rate for a candidate with a similar profile, as a percentage (e.g., 85 for 85%).'),
    reason: z.string().optional().describe('DETAILED, coach-like reason why this visa is recommended, including insightful tips, potential strategies, or important considerations. This should reflect the persona of a seasoned visa coach, providing comprehensive advice.'),
  });

const GeneralChatOutputSchema = z.object({
  conversationalReply: z.string().describe("Japa Genie's conversational response to the user. This response MUST be detailed, empathetic, and reflect the persona of a seasoned visa coach."),
  visaRecommendations: z.array(VisaRecommendationSchemaForOutput).optional().describe('Optional visa recommendations if generated during the conversation. Omit if none generated, or provide an empty array. Each recommendation MUST include name, cost, requirements, processingTime, successRate, and a detailed reason.'),
  webAnalysisContext: z.string().nullable().optional().describe('Context or summary from web analysis, if performed. If no analysis or if analysis results are not meaningful (e.g., "could not find information", "error occurred", "summarization failed", "sources inaccessible"), this field SHOULD BE OMITTED by the LLM, or can be null (which will be treated as omitted by the flow).'),
});
export type GeneralChatOutput = z.infer<typeof GeneralChatOutputSchema>;


export async function generalChat(input: GeneralChatInput): Promise<GeneralChatOutput> {
  console.log('[generalChat] Initiated with input:', JSON.stringify(input, null, 2));
  const result = await generalChatFlow(input);
  console.log('[generalChat] Concluded with result:', JSON.stringify(result, null, 2));
  return result;
}

const getVisaOptionsTool = ai.defineTool(
  {
    name: 'getVisaOptionsTool',
    description: 'Retrieves visa options based on a given budget and background. This tool provides the raw visa data. Only use this tool if the user has explicitly provided both their budget AND background information within the current conversation turn or recent history. Do not guess or infer these values.',
    inputSchema: z.object({
      budget: z.number().describe('The budget for the visa in USD, explicitly stated by the user.'),
      background: z.string().describe('The background of the user (education, work experience), explicitly stated by the user.'),
    }),
    outputSchema: z.array(z.object({ // Mirroring VisaOption structure
      name: z.string(),
      cost: z.object({ usd: z.number() }),
      requirements: z.object({ minimumEducation: z.string(), minimumWorkExperience: z.string() }),
      processingTime: z.string(),
      successRate: z.number(),
    })).describe('Array of visa options matching the criteria.'),
  },
  async (toolInput) => {
    console.log(`[getVisaOptionsTool] Tool called with budget: ${toolInput.budget}, background: "${toolInput.background}"`);
    try {
      const options = await getVisaOptions(toolInput.budget, toolInput.background);
      console.log(`[getVisaOptionsTool] Tool returning ${options.length} options:`, JSON.stringify(options));
      return options;
    } catch (error) {
      console.error(`[getVisaOptionsTool] Error in tool execution:`, error);
      return []; // Return empty array on error to prevent flow crash
    }
  }
);

const fetchAndAnalyzeWebInformationTool = ai.defineTool(
  {
    name: 'fetchAndAnalyzeWebInformationTool',
    description: 'Fetches and analyzes content from the web to answer questions requiring real-time data, recent statistics, or specific details not in general knowledge. Use this for queries like "visa success rates for X country", "latest immigration policy changes for Y", or "economic outlook for Z for immigrants". You MUST provide a clear, specific query to this tool.',
    inputSchema: z.object({
      query: z.string().describe('A clear, specific question or topic for web research. E.g., "Current visa approval statistics for UK skilled worker visa for software engineers 2024" or "Impact of new German immigration law on student visas".'),
    }),
    outputSchema: z.object({
      analysisSummary: z.string().describe('A concise summary of the information found from relevant web pages, directly addressing the query. If no relevant information is found, or pages are inaccessible, or summarization fails, this will indicate that clearly (e.g., "Could not find relevant information for the query...", "Failed to access web sources for the query..."). This summary should be suitable for direct inclusion in the `webAnalysisContext` output field if the search was meaningful.'),
      sourceUrlsUsed: z.array(z.string().url()).optional().describe('List of URLs from which information was primarily extracted, if successful.')
    }),
  },
  async (toolInput) => {
    let analysisSummary = `Could not find relevant information for the query: "${toolInput.query}".`; // Default pessimistic summary
    const sourceUrlsUsed: string[] = [];
    console.log(`[fetchAndAnalyzeWebInformationTool] Tool initiated with query: "${toolInput.query}"`);

    try {
      console.log('[fetchAndAnalyzeWebInformationTool] Attempting URL suggestion.');
      const urlSuggestionPrompt = ai.definePrompt({
        name: 'urlSuggestionForWebSearch',
        input: { schema: z.object({ query: z.string() }) },
        output: { schema: z.object({ urls: z.array(z.string().url()).optional(), reasoning: z.string().optional() }) },
        prompt: `Based on the query: "{{query}}", identify up to 2 highly relevant and authoritative URLs (e.g., official government immigration websites, major reputable news outlets, respected international organizations) that are most likely to contain specific, up-to-date information. Prioritize official sources.

        Provide the URLs as a list. Also provide a brief reasoning why these URLs were chosen.
        If no specific URLs come to mind or if the query is too broad for specific URLs, return an empty list for URLs and state why.
        Query: "{{query}}"
        `,
        model: 'googleai/gemini-2.0-flash',
        config: { temperature: 0.3 }
      });
      
      const { output: urlSuggestionOutput } = await urlSuggestionPrompt({ query: toolInput.query });
      console.log(`[fetchAndAnalyzeWebInformationTool] URL suggestions received:`, urlSuggestionOutput);

      if (urlSuggestionOutput && urlSuggestionOutput.urls && urlSuggestionOutput.urls.length > 0) {
        const extractedContents: WebContentExtractorOutput[] = [];
        console.log(`[fetchAndAnalyzeWebInformationTool] Found ${urlSuggestionOutput.urls.length} potential URLs. Processing up to 2.`);
        
        for (const url of urlSuggestionOutput.urls.slice(0, 2)) { // Process max 2 URLs
          console.log(`[fetchAndAnalyzeWebInformationTool] Attempting to extract content from: ${url}`);
          try {
            const extractionResult = await extractWebContent({ 
              url, 
              extractionGoal: `Extract information relevant to the query: "${toolInput.query}" from the webpage at ${url}. Focus on factual data, key points, and summaries directly addressing the query.`
            });
            extractedContents.push(extractionResult);
            if (extractionResult.extractedInfo && !extractionResult.extractedInfo.toLowerCase().includes("error fetching page") && !extractionResult.extractedInfo.toLowerCase().includes("could not be found")) {
               sourceUrlsUsed.push(url);
            }
            console.log(`[fetchAndAnalyzeWebInformationTool] Extraction result from ${url}:`, extractionResult.extractedInfo.substring(0, 200) + "...");
          } catch (e: any) {
            const errorMessage = e instanceof Error ? e.message : String(e);
            console.error(`[fetchAndAnalyzeWebInformationTool] Error extracting content from ${url}:`, errorMessage);
            extractedContents.push({ extractedInfo: `Error during extraction from ${url}: ${errorMessage}`, sourceUrl: url });
          }
        }

        const successfulExtractions = extractedContents.filter(
          content => content.extractedInfo && 
                     !content.extractedInfo.toLowerCase().includes("error fetching page") &&
                     !content.extractedInfo.toLowerCase().includes("could not be found") &&
                     !content.extractedInfo.toLowerCase().includes("error during extraction") &&
                     content.extractedInfo.trim() !== ''
        ).map(content => `Source: ${content.sourceUrl}\nContent: ${content.extractedInfo}`);

        console.log(`[fetchAndAnalyzeWebInformationTool] Texts collected for summarization (Successful extractions: ${successfulExtractions.length})`);

        if (successfulExtractions.length > 0) {
           console.log('[fetchAndAnalyzeWebInformationTool] Attempting to run final summary LLM.');
           const finalSummaryPrompt = ai.definePrompt({
            name: 'summarizeWebExtractionsForChat',
            input: { schema: z.object({ query: z.string(), texts: z.array(z.string()) }) },
            output: { schema: z.object({ summary: z.string() }) },
            prompt: `Original query: "{{query}}"
            Extracted information from web sources:
            {{#each texts}}
            {{{this}}}
            ---
            {{/each}}
            Synthesize these texts into a concise, analytical summary that directly answers or addresses the original query. 
            If the texts predominantly indicate an inability to find information or access issues, CLEARLY STATE that the information could not be retrieved and briefly explain why.
            If no specific information related to the query is found in the texts, state that clearly.
            Your summary MUST be comprehensive and directly address the query. Do not be vague.
            `,
            model: 'googleai/gemini-2.0-flash',
            config: { temperature: 0.5 }
          });
          const {output: summaryOutput} = await finalSummaryPrompt({ query: toolInput.query, texts: successfulExtractions });
          console.log(`[fetchAndAnalyzeWebInformationTool] Final summary LLM output received:`, summaryOutput);

          if(summaryOutput && summaryOutput.summary && summaryOutput.summary.trim() !== '') {
            analysisSummary = summaryOutput.summary;
          } else {
            analysisSummary = `Information was extracted from web sources for the query "${toolInput.query}", but the final summarization step did not produce a usable summary. The extracted content might have been insufficient or unclear.`;
            console.warn(`[fetchAndAnalyzeWebInformationTool] Summarization LLM failed or returned empty for query: "${toolInput.query}"`);
          }
        } else {
          analysisSummary = `Could not extract usable information from the suggested web sources for the query: "${toolInput.query}". All attempted sources might have been inaccessible, returned errors, or contained no relevant content.`;
          console.warn(`[fetchAndAnalyzeWebInformationTool] No successful extractions for query: "${toolInput.query}"`);
        }
      } else {
        analysisSummary = `Could not identify specific authoritative URLs for the query: "${toolInput.query}". ${urlSuggestionOutput?.reasoning || 'The query might be too broad or no URLs were suggested by the initial search.'}`;
        console.warn(`[fetchAndAnalyzeWebInformationTool] No URL suggestions for query: "${toolInput.query}"`);
      }
    } catch (error) {
      console.error("[fetchAndAnalyzeWebInformationTool] Critical error in tool execution:", error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      analysisSummary = `An unexpected critical error occurred within the web analysis tool while processing the query "${toolInput.query}". Details: ${errorMessage}`;
    }
    
    const finalToolOutput = { 
      analysisSummary: analysisSummary.trim(), 
      sourceUrlsUsed: sourceUrlsUsed.length > 0 ? sourceUrlsUsed : undefined 
    };
    console.log(`[fetchAndAnalyzeWebInformationTool] Concluding. Final tool output for query "${toolInput.query}": ${JSON.stringify(finalToolOutput, null, 2)}`);
    return finalToolOutput;
  }
);


const chatPrompt = ai.definePrompt({
  name: 'generalChatJapaGeniePrompt',
  input: { schema: GeneralChatInputSchema },
  output: { schema: GeneralChatOutputSchema },
  prompt: `You are Japa Genie, a seasoned and highly knowledgeable visa coach. Your tone is empathetic, insightful, and practical. You're known for your ability to break down complex visa situations into understandable advice and for providing tips that go beyond generic information. Engage naturally with the user. Your responses MUST be detailed and comprehensive.

Current conversation:
{{#each chatHistory}}
  {{role}}: {{parts.0.text}}
{{/each}}
User: {{{currentMessage}}}
Japa Genie:

Your primary goal is to have a helpful conversation and guide the user effectively.

**Initial Engagement & Information Gathering:**
- If the conversation is new (i.e., 'chatHistory' is empty or very short and user's message is a greeting or general query) or lacks key details (like the user's name, general background, or specific visa interests/destination), be proactive in a friendly way. For example:
    - "Welcome! I'm Japa Genie, your AI visa coach. To help you best, could you tell me a bit about your goals? For example, what's your name, and are you exploring options for a specific country or type of visa?"
    - "I can certainly help with that. To start, could you share your name and perhaps a little about what you're looking to achieve with a visa?"
- If the user has provided some initial information but key details like budget, background (education/work), or specific countries of interest are missing for visa recommendations, gently ask for them. For example: "Thanks for sharing that, [User's Name (if known)]! To help me find suitable visa options or provide more specific advice, could you tell me about your budget for this process, and a bit about your educational background and work experience?"
- Remember this information and use it to make the conversation more personal and effective.

**Contextual Memory and Follow-up Questions:**
- You **MUST** refer to the 'chatHistory' to understand the ongoing conversation. This is critical for providing relevant and coherent responses.
- **If you have presented \`visaRecommendations\` or \`webAnalysisContext\` in a recent turn (within the last 2-3 model responses in 'chatHistory') and the current user query directly relates to or continues the discussion about that specific information, you SHOULD re-include the *original, unchanged* \`visaRecommendations\` data or \`webAnalysisContext\` string in your current output object. This ensures the user can still see the relevant structured data in the display panel. Your \`conversationalReply\` should still naturally continue the discussion.**
- If the user asks a question about one of the *recently presented* visa recommendations or a related process (e.g., 'Tell me more about the Canadian Tech Talent Stream'), use the information from that recommendation as context for your \`conversationalReply\` and re-include the full \`visaRecommendations\` array (if it was presented recently and is still the active context) in your output.
- Do not use the \`getVisaOptionsTool\` or \`fetchAndAnalyzeWebInformationTool\` again for the *exact same query or context* if you have successfully provided results for it very recently. Instead, refer to and re-emit the previous results if appropriate for the current conversational turn.
- If the user's follow-up is ambiguous (e.g., 'What about the first one?'), ask for clarification based on what you recently presented. For example: "To clarify, are you referring to the [Name of first visa option from history] or something else?"
- When presenting information, clearly state how it's being delivered (e.g., in this conversational reply, or as structured data in the 'visaRecommendations' or 'webAnalysisContext' fields which will be displayed separately). Do not refer to generic UI elements you cannot directly populate through these structured fields.

**Tool Usage Instructions:**

1.  **Web Analysis (fetchAndAnalyzeWebInformationTool):**
    *   IF the user asks for information that clearly requires up-to-date web knowledge (e.g., "current visa success rates for X", "latest policy changes for Y", "economic outlook for Z for immigrants", "news about immigration in country A"), you **MUST** use the 'fetchAndAnalyzeWebInformationTool'.
    *   You **MUST** provide a clear, specific query to the tool's 'query' input.
    *   After the tool runs, it will return an 'analysisSummary'.
        *   If the 'analysisSummary' from the tool contains useful information (even if it's partial or includes caveats like "specific data was hard to find but here's a general trend"), you **MUST** incorporate the core findings into your 'conversationalReply' in a natural way. You **MUST** also populate the 'webAnalysisContext' field in your output with this 'analysisSummary'. The \`webAnalysisContext\` field is crucial for displaying these findings to the user separately.
        *   If the 'analysisSummary' indicates a *complete* failure (e.g., "Could not find any relevant information at all", "Failed to access all web sources", "Summarization tool itself failed critically"), you **MUST** explain this outcome to the user in your 'conversationalReply'. In this case of complete tool failure, the 'webAnalysisContext' field **MUST BE OMITTED** from your output object (or can be explicitly set to null by you, which the system will treat as omitted). Do not populate 'webAnalysisContext' with messages that only indicate a complete lack of results from the tool.
    *   Always guide the conversation forward after presenting web analysis results or explaining a search failure.

2.  **Visa Recommendations (getVisaOptionsTool):**
    *   IF the user asks for visa recommendations, OR if they mention their budget AND background details during the conversation, OR if the conversation context strongly implies they are ready for visa options after discussing budget/background:
        1.  You **MUST** use the 'getVisaOptionsTool' to fetch a list of potentially suitable visa options. Do not try to answer from memory if you can use the tool.
        2.  After receiving the visa options from the tool, you **MUST** populate the 'visaRecommendations' field in your output. This field should be an array of objects, where each object represents a visa and includes:
            - 'name' (string): The name of the visa.
            - 'cost' (object): With a 'usd' (number) field.
            - 'requirements' (object): With 'minimumEducation' (string) and 'minimumWorkExperience' (string) fields.
            - 'processingTime' (string): The processing time.
            - 'successRate' (number): The success rate percentage for a similar profile.
            - 'reason' (string, optional but highly encouraged): Your DETAILED, coach-like reason why this visa is recommended. Explain clearly, offer practical tips, strategic advice, potential benefits, or common pitfalls. Your language should be encouraging and empowering. Aim for comprehensive explanations.
            Aim for at most 3 recommendations. If no visas are found or suitable, 'visaRecommendations' should be an empty array or omitted.
        3.  Your 'conversationalReply' **MUST** then briefly acknowledge that you've found some options (e.g., "Okay, I've looked into that for you and found some potential visa options. You can see the details on the right, including the estimated success rates. Which of these interests you the most, or would you like to discuss how they compare?") and offer to discuss them further or ask a clarifying question to guide the user. The reply should be detailed and natural.

**General Conversation:**
- IF the conversation is NOT about visa recommendations and does not require web search:
  - Simply provide a helpful, DETAILED, and conversational response in the 'conversationalReply' field.
  - If there are no visa recommendations relevant to the current turn (even if some were provided earlier but are no longer the immediate topic), the 'visaRecommendations' field should be an empty array or omitted for this turn.
  - If web analysis was not performed for the current turn, the 'webAnalysisContext' field **MUST be omitted** from the output object (or set to null).
  - Always try to end your conversational turns in a way that invites the user to continue or makes it clear what they can do next. For example: "What are your thoughts on this?" or "Is there anything else I can help you with regarding this topic?" or "What's the next step you're considering?"

**Important Guidelines:**
- Ensure your 'conversationalReply' is always populated and is DETAILED and COMPREHENSIVE.
- If 'visaRecommendations' are generated (or re-emitted as per contextual memory guidelines), they MUST conform to the schema, especially the 'reason' field which should be thorough.
`,
  tools: [getVisaOptionsTool, fetchAndAnalyzeWebInformationTool],
  model: 'googleai/gemini-2.0-flash',
  config: {
    temperature: 0.6, 
  }
});


const generalChatFlow = ai.defineFlow(
  {
    name: 'generalChatFlow',
    inputSchema: GeneralChatInputSchema,
    outputSchema: GeneralChatOutputSchema,
  },
  async (input: GeneralChatInput): Promise<GeneralChatOutput> => {
    console.log('[generalChatFlow] Flow starting with input:', JSON.stringify(input, null, 2));
    let output: GeneralChatOutput | null = null;
    try {
      console.log('[generalChatFlow] About to call chatPrompt.');
      const promptResponse = await chatPrompt(input);
      output = promptResponse.output;
      console.log('[generalChatFlow] Received raw output from chatPrompt:', JSON.stringify(output, null, 2));
    } catch (error: any) {
        console.error('[generalChatFlow] Error calling chatPrompt:', error);
        if (error.stack) {
          console.error('[generalChatFlow] Error stack:', error.stack);
        }
        if (error.details) {
          console.error('[generalChatFlow] Error details:', JSON.stringify(error.details, null, 2));
        }
        return {
          conversationalReply: "I'm sorry, I encountered an issue while processing your request. Please try again in a moment.",
          visaRecommendations: [],
        };
    }
    

    if (!output) {
      console.error('[generalChatFlow] No output received from chatPrompt. This is unexpected.');
      return {
        conversationalReply: "I'm sorry, I encountered an issue and can't respond right now. Please try again in a moment.",
        visaRecommendations: [],
      };
    }

    const conversationalReply = output.conversationalReply || "I'm sorry, I couldn't formulate a response at this time. Please try rephrasing your message.";
    
    // Ensure visaRecommendations is an array, even if AI omits it or sends null/undefined
    const visaRecommendations = Array.isArray(output.visaRecommendations) ? output.visaRecommendations : [];
    
    let finalWebAnalysisContext: string | null | undefined = undefined;
    if (output.webAnalysisContext === null) {
      finalWebAnalysisContext = null; // Explicitly set to null if AI returns null
       console.log("[generalChatFlow] AI returned null for webAnalysisContext. Passing as null (will be omitted by UI if null).");
    } else if (output.webAnalysisContext && typeof output.webAnalysisContext === 'string' && output.webAnalysisContext.trim() !== '') {
      // Check if the context is just a generic failure message from the tool itself (which should be omitted)
      const failureKeywords = [
        "could not find relevant information for the query", 
        "failed to access web sources for the query", 
        "summarization failed",
        "unable to retrieve", 
        "could not identify specific authoritative urls", 
        "no successful extractions", 
        "an unexpected critical error occurred",
        "did not produce a usable summary",
        "did not yield a clear, concise summary"
      ];
      const providedContextLower = output.webAnalysisContext.toLowerCase();
      
      // A more robust check: if it contains failure keywords AND is relatively short, it's likely a tool failure message.
      // The AI's instruction is to OMIT webAnalysisContext on complete tool failure. This check is a safeguard.
      const isClearlyTotalFailureMessage = failureKeywords.some(keyword => providedContextLower.includes(keyword.toLowerCase())) && output.webAnalysisContext.length < 200;


      if (isClearlyTotalFailureMessage) {
        finalWebAnalysisContext = undefined; // Treat as omitted if it's just a failure message
        console.log(`[generalChatFlow] webAnalysisContext from AI indicates failure or no meaningful content ("${output.webAnalysisContext.substring(0,100)}..."). Omitting from final output.`);
      } else {
        finalWebAnalysisContext = output.webAnalysisContext.trim();
        console.log(`[generalChatFlow] Using webAnalysisContext from AI: "${finalWebAnalysisContext.substring(0,100)}..."`);
      }
    } else {
       console.log("[generalChatFlow] webAnalysisContext is empty, null, or not provided by AI. Setting to undefined (will be omitted by UI).");
       finalWebAnalysisContext = undefined;
    }


    const finalResult: GeneralChatOutput = {
      conversationalReply,
      visaRecommendations, // This will be an empty array if AI didn't provide any
      webAnalysisContext: finalWebAnalysisContext, 
    };
    console.log('[generalChatFlow] Final processed output to be returned:', JSON.stringify(finalResult, null, 2));
    return finalResult;
  }
);



==================================================
File: src/ai/flows/visa-recommendation.ts
==================================================

'use server';
/**
 * @fileOverview AI flow for providing visa recommendations based on user budget and background.
 *
 * - visaRecommendation - A function that takes user's budget and background and returns personalized visa recommendations.
 * - VisaRecommendationInput - The input type for the visaRecommendation function.
 * - VisaRecommendationOutput - The return type for the visaRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {getVisaOptions, VisaOption} from '@/services/visa-options';

const VisaRecommendationInputSchema = z.object({
  budget: z.number().describe('The budget for the visa in USD.'),
  background: z.string().describe('The background of the user, including education and work experience.'),
  travelPreferences: z.string().optional().describe('Optional travel preferences of the user.'),
});
export type VisaRecommendationInput = z.infer<typeof VisaRecommendationInputSchema>;

const VisaRecommendationOutputSchema = z.array(z.object({
  name: z.string().describe('The name of the visa.'),
  cost: z.object({
    usd: z.number().describe('The cost in USD.'),
  }).describe('The cost of the visa.'),
  requirements: z.object({
    minimumEducation: z.string().describe('The minimum education level required.'),
    minimumWorkExperience: z.string().describe('The minimum work experience required.'),
  }).describe('The requirements for the visa.'),
  processingTime: z.string().describe('The processing time for the visa.'),
  successRate: z.number().describe('The estimated success rate for a candidate with a similar profile, as a percentage (e.g., 85 for 85%).'),
  reason: z.string().describe('The detailed, coach-like reason why this visa is recommended, including insightful tips, potential strategies, or important considerations. This should reflect the persona of a seasoned visa coach.'),
}));
export type VisaRecommendationOutput = z.infer<typeof VisaRecommendationOutputSchema>;

export async function visaRecommendation(input: VisaRecommendationInput): Promise<VisaRecommendationOutput> {
  return visaRecommendationFlow(input);
}

const getVisaOptionsTool = ai.defineTool(
  {
    name: 'getVisaOptions',
    description: 'Retrieves visa options based on a given budget and background. This tool provides the raw visa data.',
    inputSchema: z.object({
      budget: z.number().describe('The budget for the visa.'),
      background: z.string().describe('The background of the user.'),
    }),
    outputSchema: z.array(z.object({
      name: z.string().describe('The name of the visa.'),
      cost: z.object({
        usd: z.number().describe('The cost in USD.'),
      }).describe('The cost of the visa.'),
      requirements: z.object({
        minimumEducation: z.string().describe('The minimum education level required.'),
        minimumWorkExperience: z.string().describe('The minimum work experience required.'),
      }).describe('The requirements for the visa.'),
      processingTime: z.string().describe('The processing time for the visa.'),
      successRate: z.number().describe('The estimated success rate for a candidate with a similar profile, as a percentage (e.g., 85 for 85%).'),
    })).describe('Array of visa options'),
  },
  async (input) => {
    return getVisaOptions(input.budget, input.background);
  }
);

const prompt = ai.definePrompt({
  name: 'visaRecommendationPrompt',
  input: {schema: VisaRecommendationInputSchema},
  output: {schema: VisaRecommendationOutputSchema},
  prompt: `You are Japa Genie, a seasoned and highly knowledgeable visa coach. Your tone is empathetic, insightful, and practical. You're known for your ability to break down complex visa situations into understandable advice and for providing tips that go beyond generic information. You always operate ethically and legally, but you're skilled at highlighting strategic advantages or "loopholes" (in the sense of clever, legitimate strategies) within visa programs.

A user will provide their budget, background, and travel preferences.
User's Budget: {{budget}} USD
User's Background: {{{background}}}
User's Travel Preferences: {{{travelPreferences}}}

First, you MUST use the 'getVisaOptionsTool' to fetch a list of potentially suitable visa options based on the user's raw budget and background. This tool will give you the factual data about visas (name, cost, basic requirements, processing time, success rate).

After receiving the visa options from the tool, your main task is to analyze each option and provide a detailed, coach-like "reason" for why it might be a good fit (or things to watch out for). Your reasoning should be the core of your response.

For each recommended visa, in the 'reason' field, you should:
- Explain clearly why this visa aligns with the user's profile and mention its success rate as a key factor.
- Offer practical tips or strategic advice related to this visa. For example, if a visa has a quicker processing time under certain conditions, mention it. If certain types of experience are valued more, highlight that.
- Point out any potential benefits or strategic advantages (e.g., pathways to permanent residency, flexibility for family members, less common but valuable perks).
- If there are common pitfalls or important considerations for this visa, gently guide the user.
- Your language should be encouraging and empowering. Avoid jargon where possible, or explain it clearly.

Format your output as an array of visa objects, adhering to the output schema. The most important part is the 'reason' field for each visa, where your coaching expertise shines. If no visas are returned by the tool, or none seem truly suitable even after your expert analysis, return an empty array.
`,
  tools: [getVisaOptionsTool],
});


const visaRecommendationFlow = ai.defineFlow(
  {
    name: 'visaRecommendationFlow',
    inputSchema: VisaRecommendationInputSchema,
    outputSchema: VisaRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Ensure output is not null, and if it is, return an empty array to match schema.
    return output || [];
  }
);



==================================================
File: src/ai/flows/web-content-extractor.ts
==================================================

'use server';
/**
 * @fileOverview AI flow for extracting targeted information from a webpage.
 *
 * - extractWebContent - A function that takes a URL and an extraction goal,
 *   fetches the page content, and uses an LLM to extract the relevant information.
 * - WebContentExtractorInput - The input type for the extractWebContent function.
 * - WebContentExtractorOutput - The return type for the extractWebContent function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { fetchWebpageHtml } from '@/services/web-fetcher';

const WebContentExtractorInputSchema = z.object({
  url: z.string().url().describe('The URL of the webpage to process.'),
  extractionGoal: z.string().min(10).describe('A clear description of the information to be extracted from the webpage content. E.g., "Extract the main contact email address" or "Summarize the key services offered."'),
});
export type WebContentExtractorInput = z.infer<typeof WebContentExtractorInputSchema>;

const WebContentExtractorOutputSchema = z.object({
  extractedInfo: z.string().describe('The extracted information based on the goal, or a statement if the information could not be found.'),
  sourceUrl: z.string().url().describe('The source URL from which the information was attempted to be extracted.'),
});
export type WebContentExtractorOutput = z.infer<typeof WebContentExtractorOutputSchema>;

export async function extractWebContent(input: WebContentExtractorInput): Promise<WebContentExtractorOutput> {
  return webContentExtractorFlow(input);
}

const fetchWebpageContentTool = ai.defineTool(
  {
    name: 'fetchWebpageContentTool',
    description: 'Fetches the raw HTML content of a given webpage URL.',
    inputSchema: z.object({
      url: z.string().url().describe('The URL of the webpage to fetch.'),
    }),
    outputSchema: z.object({
      htmlContent: z.string().describe('The raw HTML content of the webpage.'),
    }),
  },
  async (input) => {
    try {
      const html = await fetchWebpageHtml(input.url);
      return { htmlContent: html };
    } catch (e: any) {
      // It's important for the tool to return a structured error or indication
      // that the LLM can understand if fetching fails.
      return { htmlContent: `Error fetching page: ${e.message}` };
    }
  }
);

const extractionPrompt = ai.definePrompt({
  name: 'webContentExtractionPrompt',
  input: { schema: z.object({
    htmlContent: z.string(),
    extractionGoal: z.string(),
    url: z.string().url(),
  })},
  output: { schema: WebContentExtractorOutputSchema },
  prompt: `You are an expert web content analysis agent. Your task is to extract specific information from the provided HTML content of a webpage, based on a given goal.

Webpage URL: {{{url}}}
Extraction Goal: {{{extractionGoal}}}

HTML Content:
\`\`\`html
{{{htmlContent}}}
\`\`\`

Based on the HTML content and the extraction goal, provide the requested information.
If the HTML content indicates an error in fetching (e.g., starts with "Error fetching page:"), state that the page could not be accessed.
If the information cannot be found in the provided HTML, clearly state that. Be concise and directly address the extraction goal.
Return the extracted information in the 'extractedInfo' field and the original URL in the 'sourceUrl' field.
`,
  tools: [], // The tool is called by the flow, not directly by this prompt's LLM call
});

const webContentExtractorFlow = ai.defineFlow(
  {
    name: 'webContentExtractorFlow',
    inputSchema: WebContentExtractorInputSchema,
    outputSchema: WebContentExtractorOutputSchema,
  },
  async (input) => {
    // Step 1: Fetch the webpage content using the tool
    const toolOutput = await fetchWebpageContentTool({ url: input.url });

    // Step 2: Pass the fetched content and extraction goal to the LLM
    const {output} = await extractionPrompt({
      htmlContent: toolOutput.htmlContent,
      extractionGoal: input.extractionGoal,
      url: input.url,
    });
    
    if (!output) {
      throw new Error("Failed to get a response from the extraction prompt.");
    }
    return output;
  }
);



==================================================
File: src/ai/genkit.ts
==================================================
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});



==================================================
File: src/app/actions.ts
==================================================

// @ts-nocheck
// TODO: Fix TS errors
"use server";

import { visaRecommendation, type VisaRecommendationInput, type VisaRecommendationOutput } from "@/ai/flows/visa-recommendation";
import { extractWebContent, type WebContentExtractorInput, type WebContentExtractorOutput } from "@/ai/flows/web-content-extractor";
import { generalChat, type GeneralChatInput, type GeneralChatOutput } from "@/ai/flows/general-chat-flow";

interface VisaActionResult {
  success: boolean;
  data?: VisaRecommendationOutput;
  error?: string;
}

export async function getVisaRecommendationsAction(input: VisaRecommendationInput): Promise<VisaActionResult> {
  try {
    const recommendations = await visaRecommendation(input);
    return { success: true, data: recommendations };
  } catch (error) {
    console.error("Error getting visa recommendations:", error);
    return { success: false, error: error instanceof Error ? error.message : "An unknown error occurred." };
  }
}

interface WebExtractActionResult {
  success: boolean;
  data?: WebContentExtractorOutput;
  error?: string;
}

export async function extractWebContentAction(input: WebContentExtractorInput): Promise<WebExtractActionResult> {
  try {
    const result = await extractWebContent(input);
    return { success: true, data: result };
  } catch (error) {
    console.error("Error extracting web content:", error);
    return { success: false, error: error instanceof Error ? error.message : "An unknown error occurred." };
  }
}

interface GeneralChatActionResult {
  success: boolean;
  data?: GeneralChatOutput;
  error?: string;
}

export async function generalChatAction(input: GeneralChatInput): Promise<GeneralChatActionResult> {
  try {
    const result = await generalChat(input);
    return { success: true, data: result };
  } catch (error) {
    console.error("Error in general chat:", error);
    return { success: false, error: error instanceof Error ? error.message : "An unknown error occurred." };
  }
}



==================================================
File: src/app/auth/signup/page.tsx
==================================================

'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { JapaGenieLogo } from "@/components/icons/JapaGenieLogo";
import Link from "next/link";
import { Mail, Lock } from "lucide-react";

// Simple SVG for Google Icon
const GoogleIcon = () => (
  <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="currentColor">
    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 6.58l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
    <path d="M1 1h22v22H1z" fill="none"/>
  </svg>
);

export default function SignUpPage() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-light to-white py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <Link href="/" className="inline-block">
            <JapaGenieLogo className="h-16 w-16 mx-auto text-genie-gold" />
          </Link>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-dark">
            Create your Japa Genie account
          </h2>
          <p className="mt-2 text-center text-sm text-secondary">
            And start your journey to global opportunities.
          </p>
        </div>

        <Card className="shadow-2xl">
          <CardContent className="p-6 sm:p-8 space-y-6">
            <Button variant="outline" className="w-full glossy-button text-dark">
              <GoogleIcon />
              Sign up with Google
            </Button>
            {/* Add other social logins here if needed e.g. Apple */}
            {/* <Button variant="outline" className="w-full glossy-button text-dark">
              <Apple className="h-5 w-5 mr-2" /> Sign up with Apple
            </Button> */}
            
            <div className="relative my-3">
              <div className="absolute inset-0 flex items-center">
                <Separator />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-card px-2 text-muted-foreground">
                  Or continue with email
                </span>
              </div>
            </div>

            <form className="space-y-6" onSubmit={(e) => e.preventDefault()}>
              <div>
                <Label htmlFor="email" className="text-dark">Email address</Label>
                <div className="mt-1 relative rounded-md shadow-sm">
                   <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Mail className="h-5 w-5 text-gray-400" />
                  </div>
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    className="appearance-none block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground focus:outline-none focus:ring-primary focus:border-primary sm:text-sm pl-10"
                    placeholder="you@example.com"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="password">Password</Label>
                 <div className="mt-1 relative rounded-md shadow-sm">
                   <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Lock className="h-5 w-5 text-gray-400" />
                  </div>
                  <Input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="current-password"
                    required
                    className="appearance-none block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground focus:outline-none focus:ring-primary focus:border-primary sm:text-sm pl-10"
                    placeholder="••••••••"
                  />
                </div>
              </div>
              
              {/* Optional: Confirm Password Field */}
              {/* <div>
                <Label htmlFor="confirm-password">Confirm Password</Label>
                <Input id="confirm-password" name="confirm-password" type="password" required className="mt-1" placeholder="••••••••"/>
              </div> */}

              <div>
                <Button type="submit" className="w-full primary-button">
                  Create Account
                </Button>
              </div>
            </form>
             <p className="mt-4 text-center text-sm text-muted-foreground">
              By signing up, you agree to our <Link href="/terms-of-service" className="font-medium text-primary hover:text-primary/80">Terms of Service</Link> and <Link href="/privacy-policy" className="font-medium text-primary hover:text-primary/80">Privacy Policy</Link>.
            </p>
          </CardContent>
        </Card>

        <p className="mt-6 text-center text-sm text-secondary">
          Already have an account?{' '}
          <Link href="/auth/signin" className="font-medium text-primary hover:text-primary/80">
            Sign in
          </Link>
        </p>
      </div>
    </div>
  );
}



==================================================
File: src/app/globals.css
==================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary: 207 90% 54%; /* Default Blue - will be overridden */
  --secondary: 240 1% 53%; /* Default Gray */
  --accent: 39 95% 50%; /* Default Gold/Yellow */
  
  --background: 220 20% 97%;
  --foreground: 240 5% 12%;
  
  --card: 0 0% 100%;
  --card-foreground: 240 5% 12%;

  --popover: 0 0% 100%;
  --popover-foreground: 240 5% 12%;

  --primary-foreground: 0 0% 100%;
  --secondary-foreground: 0 0% 100%;

  --muted: 220 20% 90%;
  --muted-foreground: 240 5% 45%;

  --accent-foreground: 24 9.8% 10%;

  --destructive: 0 84% 60%;
  --destructive-foreground: 0 0% 100%;

  --border: 0 0% 87%;
  --input: 0 0% 96%;
  --ring: 207 90% 60%;
  --radius: 1rem;
  
  --chart-1: 207 80% 65%;
  --chart-2: 170 70% 55%;
  --chart-3: 260 80% 70%;
  --chart-4: 300 75% 60%;
  --chart-5: 30 80% 60%;
  
  --sidebar-background: 220 20% 96%;
  --sidebar-foreground: 240 5% 15%;
  --sidebar-primary: 207 90% 54%;
  --sidebar-primary-foreground: 0 0% 100%;
  --sidebar-accent: 207 90% 58%;
  --sidebar-accent-foreground: 0 0% 100%;
  --sidebar-border: 0 0% 85%;
  --sidebar-ring: 207 90% 60%;

  /* New Variables from your code */
  --primary-new: #FF6B6B;
  --secondary-new: #4338CA;
  --accent-new: #F59E0B;
  --text-dark-new: #1E293B;
  --text-light-new: #F8FAFC;
  --surface-new: #FFFFFF;
  --surface-alt-new: #F8FAFC;
}

@layer base {
  * {
    @apply border-border;
  }

  html {
    scroll-behavior: smooth;
  }

  body {
    @apply font-sans text-gray-600;
  }
  
  h1, h2, h3, h4, h5, h6 {
    @apply font-bold text-gray-900;
  }
  
  section {
    @apply py-16;
  }
}

@layer components {
  .container {
    @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
  }
  
  .btn {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2;
  }
  
  .btn-primary {
    @apply bg-genie-gold text-white hover:bg-red-500;
  }
  
  .card {
    @apply bg-white rounded-xl border border-gray-100 shadow-sm p-6;
  }

  .glass-effect {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);
    border-radius: 1rem;
  }

  .glass-header {
    background: rgba(255, 255, 255, 0.8);
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    @apply glass-effect;
  }

  .glass-card {
    background: hsla(0,0%,100%,0.7);
    @apply glass-effect;
  }

  .glossy-button {
    background: linear-gradient(to bottom, #ffffff 0%, #f0f0f5 50%, #e0e0e5 100%);
    box-shadow: 0px 6px 20px rgba(0,0,0,0.1),
                0px 1px 2px rgba(0,0,0,0.06),
                inset 0px 1px 3px rgba(255,255,255,0.9),
                inset 0px -1px 1px rgba(0,0,0,0.1);
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    border: 1px solid rgba(220, 220, 220, 0.8);
    @apply text-dark;
    @apply rounded-full;
    @apply font-medium;
  }
  .glossy-button:before {
    content: "";
    position: absolute;
    top: 0;
    left: -150%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent);
    transition: 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  .glossy-button:hover:before {
    left: 150%;
  }
  .glossy-button:hover {
    transform: translateY(-3px);
    box-shadow: 0px 8px 30px rgba(0,0,0,0.15),
                0px 2px 3px rgba(0,0,0,0.08),
                inset 0px 1px 4px rgba(255,255,255,1),
                inset 0px -1px 2px rgba(0,0,0,0.15);
  }

  .primary-button {
    background: linear-gradient(to bottom, #0071e3 0%, #0066cc 70%, #005bb5 100%);
    box-shadow: 0px 6px 20px rgba(0,0,0,0.15),
                0px 1px 2px rgba(0,0,0,0.08),
                inset 0px 1px 3px rgba(255,255,255,0.4),
                inset 0px -1px 1px rgba(0,0,0,0.2);
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    @apply text-white;
    @apply rounded-full;
    @apply font-semibold;
  }
  .primary-button:hover {
    transform: translateY(-3px);
    box-shadow: 0px 8px 30px rgba(0,0,0,0.2),
                0px 2px 3px rgba(0,0,0,0.1),
                inset 0px 1px 4px rgba(255,255,255,0.5),
                inset 0px -1px 2px rgba(0,0,0,0.25);
  }
  .primary-button:before {
    content: "";
    position: absolute;
    top: 0;
    left: -150%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  .primary-button:hover:before {
    left: 150%;
  }

  .hero-chat-visual {
    background: linear-gradient(135deg, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0.05) 100%);
    @apply glass-effect;
    @apply transition-all duration-300 hover:shadow-2xl hover:-translate-y-1;
    filter: drop-shadow(0 10px 15px rgba(0,0,0,0.1));
  }
}

@layer utilities {
  .text-gradient {
    @apply bg-gradient-to-r from-gray-900 via-genie-gold to-red-500 bg-clip-text text-transparent;
  }
  
  .bg-gradient-genie {
    @apply bg-gradient-to-br from-light to-white;
  }
}



==================================================
File: src/app/layout.tsx
==================================================

import type {Metadata} from 'next';
import './globals.css'; // Styles from globals.css will apply
import { Toaster } from "@/components/ui/toaster";
import { AppHeader } from '@/components/layout/app-header';
import { AppFooter } from '@/components/layout/app-footer'; // Import the footer

export const metadata: Metadata = {
  title: 'Japa Genie: Your AI-Powered Visa Guide',
  description: 'Stop getting scammed by visa agents. Start getting real results today with Japa Genie. AI-powered visa guidance, eligibility checks, and personalized roadmaps.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="h-full">
      <body className="font-sans text-dark bg-light h-full flex flex-col">
        <AppHeader />
        <main className="flex-grow overflow-y-auto">{children}</main>
        <AppFooter /> {/* Add the footer here */}
        <Toaster />
      </body>
    </html>
  );
}



==================================================
File: src/app/page.tsx
==================================================
export default function Home() { return <h1>Fixed!</h1>; }



==================================================
File: src/components/icons/JapaGenieLogo.tsx
==================================================
import type { SVGProps } from 'react';

export function JapaGenieLogo(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      version="1.1"
      id="Layer_1"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      x="0px"
      y="0px"
      viewBox="0 0 68.61 122.88"
      xmlSpace="preserve"
      className={props.className ? `${props.className} genie-logo-svg` : "genie-logo-svg"} // Add base class for hover
      {...props} // Spread other props
    >
      <style type="text/css">{`.st0{fill-rule:evenodd;clip-rule:evenodd;}`}</style>
      <g>
        <path
          className="st0"
          style={{ fill: '#FDD20E' }} // Genie gold for the main body
          d="M55.41,80.68c-3.63,1.09-7.09,1.07-10.44,0.22c-3.58-0.91-7-2.78-10.3-5.27c-3.44,2.58-7.04,4.35-10.84,5.12 c-3.66,0.74-7.47,0.54-11.45-0.75c-1.64,9.06,0.1,16.51,4.31,22.79c3.97,5.93,10.16,10.87,17.82,15.17 c-0.29-1.2-0.48-2.36-0.57-3.48c-0.19-2.34,0.06-4.48,0.74-6.44c1.63-4.74,5.4-7.32,9.4-10.06C49.28,94.4,54.92,90.52,55.41,80.68 L55.41,80.68z M24.03,10.16c-1.5-5.84,2.44-10.46,8.4-10.14c4.06,0.22,6.89,2.39,9.19,4.79c3.86,4.02,6.2,8.66,10.32,5.64 c-0.05,3.7-1.83,6.21-5.55,6.92c0.65,1.34,1.15,2.83,1.45,4.48c0.07,0.38,0.13,0.76,0.18,1.15c1.08,0.46,2.01,1.16,2.71,2.01 c0.84,1.02,1.35,2.27,1.39,3.63c0.05,1.41-0.41,2.73-1.24,3.82c1.45,0.38,2.52,1.69,2.52,3.26c0,1.86-1.51,3.37-3.37,3.37 c-1.74,0-3.18-1.33-3.35-3.03c-0.94,2.87-2.07,5.62-4.09,7.82c-0.3,0.32-0.61,0.61-0.94,0.88c1.78,0.1,3.53,0.24,5.23,0.42 c9.12,1.01,15.17,4.63,18.52,9.2c1.9,2.6,2.93,5.5,3.15,8.41c0.22,2.91-0.36,5.83-1.68,8.48c-1.64,3.29-4.42,6.14-8.21,8.01 c0.03,12.59-6.65,17.18-12.78,21.39c-3.54,2.43-6.87,4.71-8.15,8.44c-0.53,1.54-0.72,3.25-0.57,5.13c0.16,1.94,0.68,4.06,1.58,6.38 c0.19,0.43,0.19,0.94-0.04,1.39c-0.41,0.8-1.38,1.12-2.18,0.71C26.8,117.75,18.9,111.9,14,104.59c-4.81-7.18-6.72-15.7-4.63-26.05 c-1.5-0.82-2.87-1.81-4.07-2.94c-2.02-1.9-3.55-4.2-4.44-6.72c-1.78-5.07-0.93-10.98,3.98-16.35c1.68-1.84,3.71-3.26,5.99-4.35 c2.23-1.07,4.69-1.83,7.28-2.37c1.31-0.27,2.65-0.49,4.01-0.65c-0.74-0.61-1.4-1.31-1.97-2.08c-0.64-0.88-1.17-1.87-1.57-2.98 c-0.03-0.06-0.07-0.11-0.1-0.17c-0.54-0.96-1.04-2-1.47-3.1c-0.46,1.31-1.71,2.26-3.18,2.26c-1.86,0-3.37-1.51-3.37-3.37 c0-1.21,0.64-2.28,1.61-2.87c-0.56-0.92-0.87-1.97-0.87-3.08c0-1.36,0.47-2.62,1.28-3.67c0.66-0.86,1.56-1.57,2.6-2.07 c0.07-0.79,0.18-1.58,0.33-2.36c1.05-5.46,4.26-9.23,8.28-11.31C23.79,10.28,23.91,10.22,24.03,10.16L24.03,10.16z M36.62,47.81 c-1.47,0.98-2.5,2.21-2.39,4.52c-2.68-0.43-3.59-1.52-5.04-3.52c-0.69-0.18-1.47-0.48-2.27-0.84c-0.23,0.01-0.47,0.03-0.7,0.04 c-2.57,0.17-5.09,0.46-7.47,0.96c-2.35,0.49-4.56,1.17-6.53,2.11c-1.92,0.92-3.62,2.11-5,3.62c-3.99,4.37-4.71,9.09-3.3,13.11 c0.71,2.02,1.96,3.87,3.6,5.42c1.66,1.57,3.73,2.82,6.06,3.62c5.78,1.98,13.14,1.13,19.91-4.68c0.55-0.69,1.12-1.34,1.71-1.95 c-1.76-1.57-3.55-2.63-5.36-3.24c-2.18-0.74-4.43-0.84-6.73-0.44c-0.88,0.15-1.72-0.44-1.88-1.32c-0.15-0.88,0.44-1.72,1.32-1.88 c2.82-0.49,5.59-0.35,8.31,0.56c2.31,0.78,4.55,2.12,6.72,4.1c0.47-0.39,0.95-0.76,1.45-1.11c2.04-1.46,4.25-2.61,6.59-3.52 c0.83-0.32,1.77,0.09,2.09,0.93c0.32,0.83-0.09,1.77-0.92,2.09c-2.09,0.81-4.07,1.84-5.88,3.14c-1.39,0.99-2.69,2.15-3.89,3.48 c2.45,1.83,4.94,3.26,7.49,4.13c2.92,1,5.94,1.26,9.1,0.52l0,0c5.02-1.24,8.57-4.24,10.39-7.87c1.06-2.12,1.53-4.46,1.35-6.79 c-0.18-2.33-1-4.65-2.53-6.74c-2.85-3.9-8.15-6.99-16.26-7.89c-2.03-0.22-4.08-0.38-6.14-0.47C39.14,47.86,37.88,47.83,36.62,47.81 L36.62,47.81z M29.83,44.01c1.16-0.84,1.44-3.08,2.81-3.03c1.42,0.05,1.61,2.54,2.89,2.88l0.01,0.08c3.29-0.7,6.18-2.56,7.81-5.48 c1.16-2.44,1.62-5.33,2.09-8.34c0.41-2.63,0.46-5.35-0.02-7.95c-0.9-4.87-3.21-7.75-6.71-9.6c-2.17-1.14-4.6-1.72-7.04-1.72 c-2.44-0.01-4.89,0.55-7.06,1.68c-3.52,1.82-5.84,4.66-6.77,9.48c-0.54,2.81-0.5,5.78-0.02,8.62 C19.17,38.68,24.14,42.99,29.83,44.01L29.83,44.01z M25.04,24.29c0.87,0,1.57,0.98,1.57,2.18s-0.7,2.18-1.57,2.18 c-0.87,0-1.57-0.98-1.57-2.18S24.17,24.29,25.04,24.29L25.04,24.29z M27.24,36.48c-0.33-0.47-0.14-0.72,0.2-0.95 c0.23-0.16,0.54-0.14,0.88-0.05c1.64,0.44,1.65,0.64,3.49,0.63c1.84-0.01,2.13-0.28,3.72-0.68c0.27-0.07,0.53-0.09,0.76-0.02 c0.53,0.17,0.71,0.57,0.38,1.06C34.37,39.84,29,38.95,27.24,36.48L27.24,36.48z M35.91,22.81c-0.15,0.3-0.08,0.58,0.14,0.71 c0.41,0.25,1.23-0.2,1.76-0.31c0.82-0.17,1.66-0.14,2.5,0.07c0.44,0.12,1.03,0.42,1.47,0.3c0.34-0.1,0.49-0.43,0.31-0.73 C41.04,21.06,36.72,21.12,35.91,22.81L35.91,22.81z M21.95,22.81c-0.15,0.3-0.08,0.58,0.14,0.71 c0.41,0.25,1.23-0.2,1.76-0.31c0.82-0.17,1.66-0.14,2.5,0.07c0.44,0.12,1.03,0.42,1.47,0.3c0.34-0.1,0.49-0.43,0.31-0.73C27.09,21.06,22.76,21.12,21.95,22.81 L21.95,22.81z M30.08,32.33c0.03-0.25,0.22-0.34,0.56-0.32h2.66c0.36-0.03,0.61,0.05,0.65,0.36c0.07,0.56-0.55,0.98-0.98,1.19 c-0.64,0.32-1.38,0.34-2.03-0.03C30.53,33.29,30.01,32.86,30.08,32.33L30.08,32.33z M39.02,24.29c0.87,0,1.57,0.98,1.57,2.18 s-0.7,2.18-1.57,2.18c-0.87,0-1.57-0.98-1.57-2.18S38.15,24.29,39.02,24.29L39.02,24.29z M49.78,33.6 c-0.46,0.38-0.97,0.7-1.52,0.97c-0.21,0.33-0.33,0.72-0.33,1.13c0,1.17,0.95,2.12,2.12,2.12c1.17,0,2.12-0.95,2.12-2.12 c0-1.17-0.95-2.12-2.12-2.12C49.95,33.59,49.86,33.59,49.78,33.6L49.78,33.6z M15.94,35.84c-1.14-0.38-2.15-1.01-2.94-1.81 c-0.06-0.06-0.12-0.13-0.18-0.19c-0.66,0.36-1.11,1.06-1.11,1.86c0,1.17,0.95,2.12,2.12,2.12C14.95,37.82,15.87,36.94,15.94,35.84 L15.94,35.84z M13.99,32.34c0.67,0.03,1.28,0.26,1.79,0.63c-0.16-0.67-0.3-1.34-0.42-2.03c-0.26-1.53-0.4-3.11-0.4-4.68 c-0.43,0.3-0.8,0.65-1.1,1.04c-0.54,0.7-0.86,1.55-0.86,2.44C13.01,30.71,13.38,31.6,13.99,32.34L13.99,32.34z M48.21,25.24 c0.06,1.73-0.06,3.48-0.33,5.17c-0.13,0.83-0.29,1.64-0.48,2.45c0.69-0.31,1.29-0.74,1.77-1.26c0.75-0.81,1.18-1.83,1.15-2.92 c-0.03-0.9-0.38-1.73-0.94-2.42C49.05,25.87,48.66,25.53,48.21,25.24L48.21,25.24z M33.41,8.53V7.38c0-1.2-1.02-2.17-2.27-2.17 h-0.77c-1.25,0-2.27,0.98-2.27,2.17v1.42c1.17-0.24,2.37-0.35,3.57-0.35C32.24,8.44,32.82,8.47,33.41,8.53L33.41,8.53z"
        />
      </g>
    </svg>
  );
}



==================================================
File: src/components/icons/PlaneLogoWithText.tsx
==================================================

import type { SVGProps } from 'react';

export function PlaneLogoWithText(props: SVGProps<SVGSVGElement>) {
  // Path data for lucide-react Plane icon
  const planePath = "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z";

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24" // Standard lucide viewBox
      {...props} // Spread remaining props, allowing overrides
    >
      {/* Plane path - as an outline */}
      <path
        d={planePath}
        fill="none" // Plane is an outline
        stroke="hsl(var(--primary))" // Outline color is primary
        strokeWidth="1" // Adjusted stroke width
      />
      {/* Text "Japa" - drawn last to be on top */}
      <text
        x="12" // Center horizontally
        y="12.3" // Adjusted y for better vertical centering
        fontSize="2.8" // Reduced font size for better fit
        fill="hsl(var(--primary))" // Text color matches plane outline
        stroke="none" // No stroke on text
        fontFamily="var(--font-geist-sans), Arial, sans-serif"
        fontWeight="bold"
        textAnchor="middle" // Horizontally align text center to x coordinate
        dominantBaseline="central" // Vertically align text center to y coordinate
      >
        Japa
      </text>
    </svg>
  );
}



==================================================
File: src/components/icons/PlaneWithGenie.tsx
==================================================

import type { SVGProps } from 'react';

export function PlaneWithGenie(props: SVGProps<SVGSVGElement>) {
  // Path data for lucide-react Plane icon
  const planePath = "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z";

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24" // Standard lucide viewBox
      {...props} // Spread className, style, etc.
    >
      {/* Plane path as an outline */}
      <path
        d={planePath}
        fill="none"
        stroke="currentColor" // Takes color from className (e.g., text-accent)
        strokeWidth="1" // Adjusted stroke width for better outline visibility
      />
      {/* Text "Genie" */}
      <text
        x="12" // Centered horizontally
        y="12"  // Centered vertically on viewBox
        fontSize="1.6" // Reduced font size further (Genie is longer)
        fill="hsl(var(--primary-foreground))" // Text color for contrast
        fontFamily="var(--font-geist-sans), Arial, sans-serif"
        fontWeight="bold"
        textAnchor="middle" // Horizontal centering
        dominantBaseline="central" // Vertical centering
        transform="rotate(-10 12 12)" // Rotate around the text's center (12,12)
      >
        Genie
      </text>
    </svg>
  );
}



==================================================
File: src/components/icons/PlaneWithJapa.tsx
==================================================

import type { SVGProps } from 'react';

export function PlaneWithJapa(props: SVGProps<SVGSVGElement>) {
  // Path data for lucide-react Plane icon
  const planePath = "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z";

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24" // Standard lucide viewBox
      {...props} // Spread className, style, etc.
    >
      {/* Plane path as an outline */}
      <path
        d={planePath}
        fill="none"
        stroke="currentColor" // Takes color from className (e.g., text-primary)
        strokeWidth="1" // Adjusted stroke width for better outline visibility
      />
      {/* Text "Japa" */}
      <text
        x="12" // Centered horizontally
        y="12"  // Centered vertically on viewBox
        fontSize="2.0" // Reduced font size further
        fill="hsl(var(--primary-foreground))" // Text color for contrast
        fontFamily="var(--font-geist-sans), Arial, sans-serif"
        fontWeight="bold"
        textAnchor="middle" // Horizontal centering
        dominantBaseline="central" // Vertical centering
        transform="rotate(-10 12 12)" // Rotate around the text's center (12,12)
      >
        Japa
      </text>
    </svg>
  );
}



==================================================
File: src/components/icons/japa-genie-logo-icon.tsx
==================================================

// This file is intentionally left blank as it's being replaced.
// It can be deleted from the project.



==================================================
File: src/components/icons/logo-icon.tsx
==================================================
import type { SVGProps } from 'react';

export function LogoIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" />
      <path d="M12 11l4.5 2.5" />
      <path d="M12 11l-4.5 2.5" />
      <path d="M12 11V6" />
      <circle cx="12" cy="11" r="1" fill="currentColor" />
    </svg>
  );
}



==================================================
File: src/components/icons/plane-on-runway-logo-icon.tsx
==================================================

// This file is no longer used for the header logo and can be deleted or kept for other purposes.
// Its content is blanked to reflect its removal from active use in the header.
import type { SVGProps } from 'react';

export function PlaneOnRunwayLogoIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      // Empty SVG or a comment indicating it's deprecated for header use
      {...props}
    ></svg>
  );
}



==================================================
File: src/components/landing/airplane-takeoff-visual.tsx
==================================================

'use client';

import { PlaneWithJapa } from '@/components/icons/PlaneWithJapa';
import { PlaneWithGenie } from '@/components/icons/PlaneWithGenie';

export function AirplaneTakeoffVisual() {
  return (
    <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
      {/* Plane 1 with "Japa" */}
      <PlaneWithJapa
        className="absolute h-24 w-24 md:h-32 md:w-32 text-genie-gold animate-airplane-takeoff"
        style={{ animationDelay: '0s' }} 
      />
      {/* Plane 2 with "Genie" - Opposite direction and slightly delayed */}
      <PlaneWithGenie
        className="absolute h-24 w-24 md:h-32 md:w-32 text-genie-gold animate-airplane-takeoff-opposite"
        style={{ animationDelay: '0.2s' }} 
      />
    </div>
  );
}



==================================================
File: src/components/landing/app-preview-section.tsx
==================================================

'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { Check, Circle, MessageSquare, Target, ClockIcon, CircleDollarSign, CheckCircle, Activity, ListChecks, Sparkles } from 'lucide-react';

interface AppPreviewSectionProps {
  id?: string;
}

export function AppPreviewSection({ id }: AppPreviewSectionProps) {
  return (
    <section id={id} className="py-16 md:py-24 bg-background">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12 md:mb-16">
          <h2 className="text-3xl sm:text-4xl font-bold mb-4 text-primary">
            Meet Your AI Visa Companion
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            See how Japa Genie transforms your visa journey from chaos to clarity.
          </p>
        </div>
        
        <div className="grid md:grid-cols-2 gap-8 items-stretch">
          <Card className="bg-card shadow-xl border-border/50">
            <CardHeader>
              <CardTitle className="text-xl text-primary flex items-center">
                <MessageSquare className="mr-2 h-6 w-6" /> Your Personal AI Guide
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 p-4 md:p-6 text-sm">
              <div className="p-3 rounded-lg bg-muted text-muted-foreground border-l-4 border-primary shadow">
                <strong className="text-foreground block mb-1">You:</strong>
                "I'm a software engineer with 5 years experience. My budget is about $4000. Where should I apply?"
              </div>
              <div className="p-3 rounded-lg bg-primary text-primary-foreground shadow">
                <strong className="block mb-1">Japa Genie:</strong>
                "Based on your profile (Wish 1), Canada's Express Entry is a strong contender. Germany's EU Blue Card also looks promising. With Wish 2, I can create a 6-month personalized roadmap for Canada..."
              </div>
              <div className="p-3 rounded-lg bg-accent/20 text-accent-foreground border-l-4 border-accent shadow">
                <strong className="text-accent block mb-1">📌 Japa Genie (Wish 3):</strong>
                "Your WES evaluation for Canada is due June 15th. I've pre-filled the common sections of your Express Entry profile based on our chat. Review?"
              </div>
            </CardContent>
          </Card>

          <Card className="bg-primary/10 text-primary-foreground shadow-xl border-primary/30">
            <CardHeader>
              <CardTitle className="text-xl text-primary flex items-center">
                <ListChecks className="mr-2 h-6 w-6" /> Your Progress Journey
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 p-4 md:p-6 text-sm">
              {[
                { icon: <CheckCircle className="text-accent h-6 w-6" />, label: "AI Profile Analysis Complete (Wish 1)", status: "done" },
                { icon: <Activity className="text-yellow-400 h-6 w-6 animate-pulse" />, label: "Personalized Roadmap Generated (Wish 2)", status: "progress" },
                { icon: <Circle className="text-muted-foreground/50 h-6 w-6" />, label: "Document AI Pre-Screen (Wish 3)", status: "todo" },
                { icon: <Circle className="text-muted-foreground/50 h-6 w-6" />, label: "Visa Application Submission", status: "todo" },
              ].map((item, index) => (
                <div key={index} className={`flex items-center p-3 rounded-md ${item.status === 'done' ? 'bg-accent/20' : item.status === 'progress' ? 'bg-yellow-500/20' : 'bg-muted/20'}`}>
                  <div className="mr-3 shrink-0">{item.icon}</div>
                  <span className={`${item.status === 'done' ? 'text-accent-foreground' : item.status === 'progress' ? 'text-yellow-300' : 'text-muted-foreground'}`}>{item.label}</span>
                </div>
              ))}
              <div className="mt-6 p-4 rounded-lg bg-primary/80 text-primary-foreground shadow-md">
                <div className="flex items-center mb-1"><Target className="h-5 w-5 mr-2" /><strong>Success Likelihood:</strong> <span className="ml-1 font-semibold">Increased by 35% with AI</span></div>
                <div className="flex items-center mb-1"><ClockIcon className="h-5 w-5 mr-2" /><strong>Timeline:</strong> <span className="ml-1 font-semibold">8-12 months (Canada)</span></div>
                <div className="flex items-center"><CircleDollarSign className="h-5 w-5 mr-2" /><strong>Budget Fit:</strong> <span className="ml-1 font-semibold">Within $4000 Target</span></div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* The golden button previously here has been moved to the HeroSection */}
        {/*
        <div className="mt-12 md:mt-16 text-center">
          <Button
            size="lg"
            asChild
            className="bg-amber-500 hover:bg-amber-600 text-black font-semibold shadow-xl shadow-amber-500/50 hover:shadow-amber-400/60 transform hover:scale-105 transition-all duration-200 animate-wiggle px-10 py-7 text-xl"
          >
            <Link href="/chat">
              <Sparkles className="mr-3 h-6 w-6" />
              Chat with Japa Genie Now
            </Link>
          </Button>
          <p className="text-sm text-muted-foreground mt-3">
            Experience AI-powered visa guidance firsthand.
          </p>
        </div>
        */}
      </div>
    </section>
  );
}



==================================================
File: src/components/landing/feature-card.tsx
==================================================
'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import type { LucideIcon } from 'lucide-react';

interface FeatureCardProps {
  icon: LucideIcon;
  title: string;
  description: string;
}

export function FeatureCard({ icon: Icon, title, description }: FeatureCardProps) {
  return (
    <Card className="h-full bg-background shadow-lg hover:shadow-xl transition-shadow duration-300 border border-border/70 transform hover:-translate-y-1">
      <CardHeader className="items-center text-center pb-4">
        <div className="p-3 rounded-full bg-primary/10 text-primary mb-4 inline-block">
          <Icon className="h-8 w-8" />
        </div>
        <CardTitle className="text-xl font-semibold text-foreground">{title}</CardTitle>
      </CardHeader>
      <CardContent className="text-center">
        <p className="text-muted-foreground text-sm">{description}</p>
      </CardContent>
    </Card>
  );
}



==================================================
File: src/components/landing/features-section.tsx
==================================================

'use client';

import { Button } from "@/components/ui/button";
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { Target, BarChart, Clock, CheckCircle, Building, Users, ArrowRight } from "lucide-react";

const features = [
  {
    icon: Target,
    title: "AI Visa Matchmaker",
    description: "Get matched to countries with highest acceptance rates for YOUR specific profile, qualifications, and budget.",
    color: "text-blue-600",
    bgColor: "bg-blue-50",
  },
  {
    icon: BarChart,
    title: "Real-Time Success Rates",
    description: "Live data on visa acceptance rates, processing times, and costs updated by our AI agents daily.",
    color: "text-purple-600",
    bgColor: "bg-purple-50",
  },
  {
    icon: Clock,
    title: "Visual Progress Tracking",
    description: "See exactly where you are in your journey with our interactive progress map. No more guessing.",
    color: "text-amber-600",
    bgColor: "bg-amber-50",
  },
  {
    icon: CheckCircle,
    title: "24/7 AI Guidance",
    description: "Get instant answers to your visa questions. No more waiting for consultants or outdated forums.",
    color: "text-green-600",
    bgColor: "bg-green-50",
  },
  {
    icon: Building,
    title: "Jobs in Demand",
    description: "Discover which skills are most wanted in your target countries and how to position yourself.",
    color: "text-red-600",
    bgColor: "bg-red-50",
  },
  {
    icon: Users,
    title: "Rejection Recovery",
    description: "Been rejected before? Our AI analyzes why and creates a comeback strategy that works.",
    color: "text-indigo-600",
    bgColor: "bg-indigo-50",
  },
];

export function FeaturesSection() {
  return (
    <section className="py-16 bg-surface-alt relative overflow-hidden">
      {/* Subtle background pattern */}
      <div className="absolute inset-0 bg-[url('/images/pattern.svg')] opacity-5"></div>
      
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-gray-900 via-genie-gold to-red-500 bg-clip-text text-transparent">
            Everything You Need to Succeed
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Built specifically for African professionals who refuse to settle for rejection.
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {features.map((feature, index) => (
            <div 
              key={index} 
              className="group rounded-xl p-6 transition-all duration-300 hover:shadow-lg hover:-translate-y-1 bg-white border border-gray-100"
            >
              <div className={`${feature.bgColor} ${feature.color} w-12 h-12 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform`}>
                <feature.icon className="h-6 w-6" />
              </div>
              <h3 className="text-xl font-semibold mb-2 text-gray-900">
                {feature.title}
              </h3>
              <p className="text-gray-600">
                {feature.description}
              </p>
            </div>
          ))}
        </div>
        
        <div className="text-center mt-12">
          <Button 
            size="lg" 
            className="group relative overflow-hidden bg-gradient-to-r from-genie-gold to-red-500 hover:from-red-500 hover:to-genie-gold transition-all duration-300 shadow-lg hover:shadow-xl"
            asChild
          >
            <Link href="/features" className="flex items-center gap-2">
              <span className="relative z-10">Explore All Features</span>
              <ArrowRight className="h-5 w-5 group-hover:translate-x-1 transition-transform" />
              <div className="absolute inset-0 bg-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </Link>
          </Button>
        </div>
      </div>
    </section>
  );
}



==================================================
File: src/components/landing/hero-section.tsx
==================================================
'use client';

import { useState, useEffect, useRef } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { MessageCircle, Send, Plane, Sparkles, ArrowRight } from "lucide-react";
import Link from 'next/link';
import { cn } from '@/lib/utils';

const placeholderQuestionsList = [
  "Ask about visas for Canada...",
  "What are EU Blue Card requirements?",
  "How much is a UK student visa?",
  "Tell me about Australian skilled migration.",
  "What's the processing time for US H-1B?",
  "Compare Germany vs. Netherlands for tech."
];

export function HeroSection() {
  const [currentPlaceholder, setCurrentPlaceholder] = useState('');
  const [questionIndex, setQuestionIndex] = useState(0);
  const [charIndex, setCharIndex] = useState(0);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showCursor, setShowCursor] = useState(true);

  const planeRef = useRef<HTMLDivElement>(null);
  const [planeTransformY, setPlaneTransformY] = useState(0);

  const typingSpeed = 120;
  const deletingSpeed = 70;
  const pauseBeforeDelete = 2500;
  const pauseBeforeNewQuestion = 500;

  useEffect(() => {
    let timeoutId: NodeJS.Timeout;

    if (isDeleting) {
      if (charIndex > 0) {
        timeoutId = setTimeout(() => {
          setCurrentPlaceholder(prev => prev.substring(0, prev.length - 1));
          setCharIndex(charIndex - 1);
        }, deletingSpeed);
      } else {
        setIsDeleting(false);
        setQuestionIndex((prevIndex) => (prevIndex + 1) % placeholderQuestionsList.length);
        timeoutId = setTimeout(() => {
          // Pause before starting new question
        }, pauseBeforeNewQuestion);
      }
    } else { // Typing
      if (charIndex < placeholderQuestionsList[questionIndex].length) {
        timeoutId = setTimeout(() => {
          setCurrentPlaceholder(placeholderQuestionsList[questionIndex].substring(0, charIndex + 1));
          setCharIndex(charIndex + 1);
        }, typingSpeed);
      } else {
        timeoutId = setTimeout(() => {
          setIsDeleting(true);
        }, pauseBeforeDelete);
      }
    }
    return () => clearTimeout(timeoutId);
  }, [charIndex, isDeleting, questionIndex]);

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor(prev => !prev);
    }, 500);
    return () => clearInterval(cursorInterval);
  }, []);
  
  useEffect(() => {
    const handleScroll = () => {
      if (planeRef.current) {
        const scrollY = window.scrollY;
        const parallaxFactor = -0.15; 
        setPlaneTransformY(scrollY * parallaxFactor);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);


  return (
    <section className="min-h-screen flex items-center pt-20 md:pt-24 bg-gradient-to-br from-[#0f172a]/95 via-[#4338ca]/80 to-[#f59e0b]/60 relative overflow-hidden">
      {/* Video Background */}
      <div className="absolute top-0 left-0 w-full h-full z-0">
        <video
          autoPlay
          loop
          muted
          playsInline
          className="w-full h-full object-cover mix-blend-overlay"
          src="/videos/Extreme_closeup_of_202506211607_orzt4.mp4"
          onError={(e) => {
            console.error('Primary video failed to load, attempting fallback.', e);
            (e.target as HTMLVideoElement).src = "https://assets.mixkit.co/videos/preview/mixkit-womans-hands-typing-on-a-laptop-4299-large.mp4";
          }}
        />
      </div>

      {/* Animated Gradient Overlay */}
      <div className="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-transparent via-white/10 to-transparent z-[1] animate-shine"></div>
      
      {/* Enhanced Plane Animation */}
      <div
        ref={planeRef}
        className="absolute inset-0 z-[2] pointer-events-none"
        style={{ transform: `translateY(${planeTransformY}px)` }}
      >
        <Plane
          className="absolute h-48 w-48 md:h-64 md:w-64 text-genie-gold/40 animate-fly-across drop-shadow-[0_0_15px_rgba(255,107,107,0.5)]"
          style={{ animationDuration: '18s' }}
        />
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16 relative z-[3]">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 md:gap-16 items-center">
          <div className="lg:pr-8">
            <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold leading-tight mb-6 bg-gradient-to-r from-white via-genie-gold to-red-400 bg-clip-text text-transparent">
              STOP Getting Scammed by <span className="text-red-400">Fake Visa Agents.</span> START Getting Real Results Today <span className="text-genie-gold">with Japa Genie.</span>
            </h1>
            <p className="text-lg md:text-xl text-gray-200 max-w-xl mb-8 leading-relaxed">
              Our AI matches you to countries where Africans like you have <span className="text-genie-gold font-bold">89% approval rates</span>. Start a conversation with Japa Genie and find your destination...
            </p>
            <div className="mt-10 flex flex-col sm:flex-row items-start sm:items-center gap-4">
              <Button
                size="lg"
                className="group relative overflow-hidden bg-gradient-to-r from-genie-gold to-red-500 hover:from-red-500 hover:to-genie-gold transition-all duration-300 shadow-lg hover:shadow-xl"
                asChild
              >
                <Link href="/chat" className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 group-hover:rotate-12 transition-transform" />
                  <span className="relative z-10">Start Your Journey</span>
                  <div className="absolute inset-0 bg-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </Link>
              </Button>
              <Button
                variant="link"
                className="text-white hover:text-genie-gold text-lg group flex items-center gap-1"
                asChild
              >
                <Link href="/how-it-works">
                  Learn How It Works 
                  <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
                </Link>
              </Button>
            </div>
          </div>

          <Link href="/chat" className="group block relative mt-10 lg:mt-0">
            <div className="transition-transform duration-300 ease-in-out group-hover:scale-105 group-hover:-translate-y-2">
              <div className="absolute inset-0 bg-gradient-to-tr from-blue-500/20 to-purple-500/20 rounded-3xl transform -rotate-3 lg:-rotate-6 hero-product-visual-container shadow-2xl"></div>
              <div className={cn(
                "relative rounded-2xl shadow-xl hero-chat-visual overflow-hidden p-1 backdrop-blur-sm"
              )}>
                <div className="bg-card/80 rounded-[calc(1rem-4px)] h-full w-full border border-white/10">
                  <div className="h-96 md:h-[28rem] flex flex-col items-center justify-center p-4 md:p-6 text-dark relative">
                    <div className="absolute inset-0 bg-[url('/videos/chat-preview.mp4')] bg-cover bg-center opacity-10"></div>
                    <div className="relative z-10 w-full max-w-md text-center">
                      <MessageCircle className="text-primary fill-primary/10 h-16 w-16 md:h-20 md:w-20 mb-3 md:mb-4 inline-block animate-pulse" />
                      <div className="text-2xl md:text-3xl font-bold mb-1 md:mb-2 text-foreground bg-gradient-to-b from-foreground to-gray-600 bg-clip-text text-transparent">
                        Chat with Japa Genie
                      </div>
                      <div className="text-sm md:text-base text-secondary mb-4 md:mb-6">
                        Your journey starts with a simple question.
                      </div>
                      
                      <div className="w-full max-w-sm mx-auto animate-wiggle">
                        <div className="flex items-center border border-input/30 rounded-full px-3 py-2 md:px-4 md:py-3 bg-card/50 shadow-sm backdrop-blur-sm hover:border-primary/50 transition-colors">
                          <Input
                            type="text"
                            placeholder={currentPlaceholder + (showCursor && (charIndex === placeholderQuestionsList[questionIndex].length || charIndex === 0) ? '|' : '')}
                            className="flex-grow focus:outline-none text-xs md:text-sm text-dark bg-transparent placeholder-secondary border-none focus-visible:ring-0 focus-visible:ring-offset-0"
                            readOnly
                          />
                          <div className="ml-2 md:ml-3 text-primary h-auto w-auto p-0 group-hover:text-genie-gold transition-colors">
                            <Send className="h-4 w-4 md:h-5 md:w-5" />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Link>
        </div>
      </div>
    </section>
  );
}



==================================================
File: src/components/landing/mock-interview-section.tsx
==================================================

'use client';

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { PlayCircle, CheckCircle2, FileText, Calendar, Briefcase, ArrowRight } from "lucide-react";

const mockInterviewFeatures = [
  {
    icon: PlayCircle,
    title: "Video Guides",
    description: "US visa interview preparation videos",
    color: "text-blue-600",
    bgColor: "bg-blue-50",
  },
  {
    icon: FileText,
    title: "Document Templates",
    description: "German visa application document templates",
    color: "text-purple-600",
    bgColor: "bg-purple-50",
  },
  {
    icon: Calendar,
    title: "Interview Scheduler",
    description: "Book mock interviews with experts",
    color: "text-amber-600",
    bgColor: "bg-amber-50",
  },
  {
    icon: Briefcase,
    title: "Industry-Specific Tips",
    description: "Tailored advice for different professions",
    color: "text-green-600",
    bgColor: "bg-green-50",
  },
];

export function MockInterviewSection() {
  const [activeTab, setActiveTab] = useState(0);
  const tabs = ["Student Visas", "Work Permits", "Business Visas", "Family Reunification"];

  return (
    <section className="py-16 bg-white relative overflow-hidden">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-gray-900 via-genie-gold to-red-500 bg-clip-text text-transparent">
            Mock Interview Preparation
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Practice with our AI-powered interview generator and increase your chances of approval.
          </p>
        </div>
        
        <div className="mb-12">
          <div className="flex flex-wrap justify-center gap-2">
            {tabs.map((tab, index) => (
              <Button
                key={index}
                variant={activeTab === index ? "default" : "ghost"}
                onClick={() => setActiveTab(index)}
                className={cn(
                  "rounded-full px-6 transition-all duration-300",
                  activeTab === index 
                    ? "bg-gradient-to-r from-genie-gold to-red-500 text-white" 
                    : "text-gray-600 hover:text-genie-gold"
                )}
              >
                {tab}
              </Button>
            ))}
          </div>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
          <div className="order-2 lg:order-1">
            <div className="bg-gray-50 rounded-xl p-6 shadow-sm">
              <h3 className="text-xl font-semibold mb-4">Sample Interview Questions</h3>
              <div className="space-y-4">
                {[
                  "Can you explain your study plans in detail?",
                  "How will you finance your education?",
                  "What are your plans after graduation?",
                  "Do you have any relatives in the country?",
                  "Why did you choose this specific university?"
                ].map((question, i) => (
                  <div key={i} className="flex items-start gap-3">
                    <CheckCircle2 className="h-5 w-5 text-genie-gold mt-0.5" />
                    <p className="text-gray-600">{question}</p>
                  </div>
                ))}
              </div>
              <div className="mt-6">
                <Button 
                  className="group relative overflow-hidden bg-gradient-to-r from-genie-gold to-red-500 hover:from-red-500 hover:to-genie-gold transition-all duration-300 shadow-lg hover:shadow-xl"
                  asChild
                >
                  <Link href="/interview" className="flex items-center gap-2">
                    <span>Start Practice Interview</span>
                    <ArrowRight className="h-4 w-4 group-hover:translate-x-1 transition-transform" />
                  </Link>
                </Button>
              </div>
            </div>
          </div>
          
          <div className="order-1 lg:order-2 grid grid-cols-1 sm:grid-cols-2 gap-4">
            {mockInterviewFeatures.map((feature, index) => (
              <div 
                key={index} 
                className="group rounded-xl p-6 transition-all duration-300 hover:shadow-lg hover:-translate-y-1 bg-white border border-gray-100"
              >
                <div className={`${feature.bgColor} ${feature.color} w-12 h-12 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform`}>
                  <feature.icon className="h-6 w-6" />
                </div>
                <h3 className="text-lg font-semibold mb-2 text-gray-900">
                  {feature.title}
                </h3>
                <p className="text-gray-600">
                  {feature.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}



==================================================
File: src/components/landing/pain-points-section.tsx
==================================================

'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ShieldX, Layers, Hourglass, NavigationOff, FileStack, MapPinOff } from 'lucide-react';

const painPointsData = [
  {
    icon: <ShieldX className="h-12 w-12 text-destructive mb-4" />,
    title: 'Costly Rejections',
    description: "You've spent ₦500k+ on visa fees, documents, and travel, only to get rejected without clear reasons.",
  },
  {
    icon: <Layers className="h-12 w-12 text-primary mb-4" />,
    title: 'Information Overload',
    description: 'Contradictory advice online, outdated YouTube videos, and "consultants" who don\'t understand your specific situation.',
  },
  {
    icon: <Hourglass className="h-12 w-12 text-yellow-500 mb-4" />,
    title: 'Time Wasting',
    description: 'Months of research, document hunting, and applications that lead nowhere while opportunities pass you by.',
  },
  {
    icon: <NavigationOff className="h-12 w-12 text-muted-foreground mb-4" />,
    title: 'Isolation & Uncertainty',
    description: "No one to guide you through the process. You're figuring it out alone while watching friends succeed abroad.",
  },
  {
    icon: <FileStack className="h-12 w-12 text-blue-400 mb-4" />,
    title: 'Document Chaos',
    description: "Birth certificates, attestations, police reports - you're drowning in paperwork with no clear roadmap.",
  },
  {
    icon: <MapPinOff className="h-12 w-12 text-orange-500 mb-4" />,
    title: 'Wrong Target Countries',
    description: 'Applying to countries with low acceptance rates for your profile instead of strategic alternatives.',
  },
];

export function PainPointsSection() {
  return (
    <section className="py-16 md:py-24 bg-background">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12 md:mb-16">
          <h2 className="text-3xl sm:text-4xl font-bold mb-4 text-primary">
            Tired of These Visa Nightmares?
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            You're not alone. Thousands of qualified Nigerians face these same challenges every day.
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {painPointsData.map((painPoint, index) => (
            <Card
              key={index}
              className="text-center bg-card shadow-lg hover:shadow-xl transition-shadow duration-300 hover:-translate-y-1 animate-fade-in-up"
              style={{ animationDelay: `${index * 0.1}s` }} // Basic staggered animation
            >
              <CardHeader className="items-center">
                {painPoint.icon}
                <CardTitle className="text-xl text-card-foreground">{painPoint.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground text-sm">{painPoint.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </section>
  );
}



==================================================
File: src/components/landing/social-proof-section.tsx
==================================================

'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Star, TrendingUp, Users, ShieldCheck } from 'lucide-react';

export function SocialProofSection() {
  return (
    <section className="py-16 md:py-24 bg-card text-card-foreground">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12 md:mb-16">
          <h2 className="text-3xl sm:text-4xl font-bold mb-4 text-primary">
            Success Stories That Inspire
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            Join thousands of Africans who've achieved their Japa dreams with us.
          </p>
        </div>

        <Card className="max-w-3xl mx-auto mb-12 md:mb-16 p-6 md:p-8 shadow-xl bg-background border border-border/50">
          <CardContent className="text-center">
            <div className="flex justify-center mb-4">
              {[...Array(5)].map((_, i) => (
                <Star key={i} className="h-6 w-6 text-yellow-400 fill-yellow-400" />
              ))}
            </div>
            <p className="text-lg md:text-xl italic text-foreground mb-6">
              "I wasted <span className="font-semibold">over $1000 USD</span> on two rejected applications to the UK. Japa Genie showed me why I was failing and guided me to Canada instead. Got my PR in 14 months. This app literally changed my life."
            </p>
            <p className="font-semibold text-primary">- Adunni O., Software Developer <span className="text-muted-foreground">(Now in Toronto)</span></p>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 sm:grid-cols-3 gap-6 md:gap-8 text-center">
          <div className="p-6 bg-background rounded-lg shadow-lg border border-border/30">
            <TrendingUp className="h-10 w-10 text-accent mx-auto mb-3" />
            <div className="text-3xl font-bold text-accent">94%</div>
            <p className="text-muted-foreground mt-1">Success Rate (412 out of 437 users in 2024 following our strategy)</p>
          </div>
          <div className="p-6 bg-background rounded-lg shadow-lg border border-border/30">
            <Users className="h-10 w-10 text-primary mx-auto mb-3" />
            <div className="text-3xl font-bold text-primary">1,200+</div>
            <p className="text-muted-foreground mt-1">Successful relocations guided</p>
          </div>
          <div className="p-6 bg-background rounded-lg shadow-lg border border-border/30">
            <ShieldCheck className="h-10 w-10 text-green-500 mx-auto mb-3" />
            <div className="text-3xl font-bold text-green-500">$45M+ USD</div>
            <p className="text-muted-foreground mt-1">Saved in avoided rejection costs (User Est.)</p>
          </div>
        </div>
      </div>
    </section>
  );
}
    



==================================================
File: src/components/landing/success-stories-section.tsx
==================================================

'use client';

import { Button } from "@/components/ui/button";
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { ArrowRight, Play, Star } from "lucide-react";

const successStories = [
  {
    name: "Sarah from Lagos",
    country: "Canada",
    role: "Software Developer",
    image: "/images/success1.jpg",
    video: "/videos/success1.mp4",
    quote: "Japa Genie helped me navigate the Express Entry process and I got my visa in just 8 weeks!"
  },
  {
    name: "John from Nairobi",
    country: "Germany",
    role: "Data Scientist",
    image: "/images/success2.jpg",
    video: "/videos/success2.mp4",
    quote: "The Start-Up Visa pathway was perfect for me. Japa Genie's AI matched me to Germany and now I'm thriving."
  },
  {
    name: "Amina from Accra",
    country: "UK",
    role: "Nurse",
    image: "/images/success3.jpg",
    video: "/videos/success3.mp4",
    quote: "The document preparation guides were spot on. I sailed through my visa interview!"
  }
];

export function SuccessStoriesSection() {
  return (
    <section className="py-16 bg-surface-alt relative overflow-hidden">
      <div className="absolute inset-0 bg-[url('/images/pattern-light.svg')] opacity-5"></div>
      
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold mb-4 text-gradient">
            Real Results from Real Users
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Africans just like you who found success with Japa Genie
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {successStories.map((story, index) => (
            <div 
              key={index} 
              className="group rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 bg-white"
            >
              <div className="aspect-video bg-gray-100 relative">
                <div className="absolute inset-0 bg-[url('/images/video-preview.jpg')] bg-cover bg-center">
                  <div className="absolute inset-0 bg-black/40 group-hover:bg-black/20 transition-colors">
                    <div className="absolute inset-0 flex items-center justify-center">
                      <Button 
                        size="icon" 
                        className="rounded-full bg-white/20 hover:bg-white/40 text-white"
                      >
                        <Play className="h-6 w-6" />
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold">{story.name}</h3>
                  <div className="flex items-center">
                    <Star className="h-5 w-5 text-genie-gold fill-genie-gold" />
                    <Star className="h-5 w-5 text-genie-gold fill-genie-gold" />
                    <Star className="h-5 w-5 text-genie-gold fill-genie-gold" />
                    <Star className="h-5 w-5 text-genie-gold fill-genie-gold" />
                    <Star className="h-5 w-5 text-genie-gold fill-genie-gold" />
                  </div>
                </div>
                <p className="text-gray-600 mb-2">{story.role}</p>
                <p className="text-gray-500 mb-4">{story.country}</p>
                <p className="text-gray-600 line-clamp-3">{story.quote}</p>
                <div className="mt-4">
                  <Button 
                    variant="link" 
                    className="text-genie-gold hover:text-red-500 p-0"
                    asChild
                  >
                    <Link href="/success-stories">Read Full Story →</Link>
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="text-center mt-12">
          <Button 
            size="lg" 
            className="group relative overflow-hidden bg-gradient-to-r from-genie-gold to-red-500 hover:from-red-500 hover:to-genie-gold transition-all duration-300 shadow-lg hover:shadow-xl"
            asChild
          >
            <Link href="/success-stories" className="flex items-center gap-2">
              <span>View All Success Stories</span>
              <ArrowRight className="h-5 w-5 group-hover:translate-x-1 transition-transform" />
            </Link>
          </Button>
        </div>
      </div>
    </section>
  );
}



==================================================
File: src/components/landing/urgency-section.tsx
==================================================

'use client';

import { AlertTriangle } from 'lucide-react';

export function UrgencySection() {
  return (
    <section className="py-10 md:py-12 bg-destructive text-destructive-foreground">
      <div className="container mx-auto px-4 text-center">
        <div className="flex flex-col sm:flex-row items-center justify-center gap-3 mb-2">
          <AlertTriangle className="h-8 w-8" />
          <h3 className="text-xl md:text-2xl font-semibold">
            Immigration Policies Are Tightening. Act Now!
          </h3>
        </div>
        <p className="text-sm md:text-base text-destructive-foreground/90 max-w-3xl mx-auto">
          Countries are reducing quotas more frequently. The window for easier migration paths is narrowing. Those who act decisively now will be among the last to benefit from current opportunities. Don't delay your Japa journey.
        </p>
      </div>
    </section>
  );
}



==================================================
File: src/components/layout/app-footer.tsx
==================================================

'use client';

import Link from 'next/link';
import { JapaGenieLogo } from '@/components/icons/JapaGenieLogo'; 

export function AppFooter() {
  return (
    <footer className="bg-card border-t border-border/50 mt-auto">
      <div className="max-w-7xl mx-auto px-6 py-6"> {/* Reduced padding significantly */}
        <div className="flex flex-col md:flex-row justify-between items-center text-center md:text-left space-y-3 md:space-y-0">
          <div className="flex items-center space-x-2">
            <Link href="/" className="flex items-center group">
              <JapaGenieLogo className="w-6 h-6 text-genie-gold group-hover:scale-105 transition-transform" /> {/* Smaller logo */}
              <span className="text-sm font-semibold text-genie-gold group-hover:text-yellow-300 transition-colors ml-1.5"> {/* Smaller text */}
                Japa Genie
              </span>
            </Link>
            <p className="text-xs text-muted-foreground">
              &copy; {new Date().getFullYear()} All rights reserved.
            </p>
          </div>
          
          <nav className="flex space-x-4">
            <Link href="/privacy-policy" className="text-xs text-muted-foreground hover:text-primary transition-colors">Privacy Policy</Link>
            <Link href="/terms-of-service" className="text-xs text-muted-foreground hover:text-primary transition-colors">Terms of Service</Link>
            <Link href="/contact-us" className="text-xs text-muted-foreground hover:text-primary transition-colors">Contact Us</Link>
          </nav>
        </div>
      </div>
    </footer>
  );
}



==================================================
File: src/components/layout/app-header.tsx
==================================================

'use client';

import Link from 'next/link';
import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { JapaGenieLogo } from "@/components/icons/JapaGenieLogo";
import { Menu, X } from "lucide-react";
import { cn } from '@/lib/utils';

export function AppHeader() {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const toggleMobileMenu = () => setIsMobileMenuOpen(!isMobileMenuOpen);

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 768 && isMobileMenuOpen) {
        setIsMobileMenuOpen(false);
      }
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [isMobileMenuOpen]);

  const navLinks = [
    { href: "/features", label: "Features" },
    { href: "/how-it-works", label: "How it Works" },
    { href: "/testimonials", label: "Testimonials" },
    { href: "/pricing", label: "Pricing" },
    { href: "/faq", label: "FAQ" },
  ];

  return (
    <header className="glass-header sticky top-0 z-50">
      <nav className="max-w-7xl mx-auto px-6 py-4 flex items-center justify-between">
        <Link href="/" className="flex items-center group">
          <JapaGenieLogo className="w-10 h-10 mr-2 text-genie-gold group-hover:scale-105 transition-transform" />
          <span className="text-2xl font-semibold text-genie-gold group-hover:text-yellow-300 transition-colors">
            Japa Genie
          </span>
        </Link>

        {/* Desktop Navigation */}
        <div
          className="hidden md:flex items-center space-x-6"
        >
          {navLinks.map((link) => (
            <Link
              key={link.label}
              href={link.href}
              className="text-sm text-dark hover:text-primary transition-colors duration-200"
            >
              {link.label}
            </Link>
          ))}
          <Button
            size="sm"
            className="glossy-button px-5 py-2 text-sm font-medium" 
            asChild
          >
             <Link href="/auth/signup">Sign Up</Link>
          </Button>
        </div>

        {/* Mobile Menu Button */}
        <div className="md:hidden">
          <button
            onClick={toggleMobileMenu}
            className="text-dark focus:outline-none"
            aria-label="Toggle menu"
          >
            {isMobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
          </button>
        </div>
      </nav>

      {/* Mobile Menu (Dropdown) */}
      {isMobileMenuOpen && (
        <div className="md:hidden bg-white py-4 shadow-lg glass-effect mx-4 mb-4 rounded-xl">
          <div className="flex flex-col items-center space-y-4">
            {navLinks.map((link) => (
              <Link
                key={link.label}
                href={link.href}
                className="text-dark hover:text-primary transition-colors duration-200 w-full text-center py-2"
                onClick={() => setIsMobileMenuOpen(false)}
              >
                {link.label}
              </Link>
            ))}
            <Button size="sm" className="glossy-button px-5 py-2 text-sm font-medium w-fit" asChild>
              <Link href="/auth/signup" onClick={() => setIsMobileMenuOpen(false)}>Sign Up</Link>
            </Button>
          </div>
        </div>
      )}
    </header>
  );
}



==================================================
File: src/components/ui/accordion.tsx
==================================================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



==================================================
File: src/components/ui/alert-dialog.tsx
==================================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



==================================================
File: src/components/ui/alert.tsx
==================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



==================================================
File: src/components/ui/avatar.tsx
==================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



==================================================
File: src/components/ui/badge.tsx
==================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



==================================================
File: src/components/ui/button.tsx
==================================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-full font-semibold ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "primary-button",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground shadow-sm hover:shadow-md text-dark",
        secondary: "glossy-button",
        ghost: "hover:bg-muted hover:text-muted-foreground text-dark",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-6 text-sm gap-2 [&_svg]:size-4",
        sm: "h-9 px-4 text-sm gap-1 [&_svg]:size-4",
        lg: "h-12 px-8 text-base gap-2 [&_svg]:size-5",
        icon: "h-10 w-10 [&_svg]:size-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



==================================================
File: src/components/ui/calendar.tsx
==================================================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }



==================================================
File: src/components/ui/card.tsx
==================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    // Applied card-glass for default glass effect. Can be overridden.
    className={cn(
      "card-glass text-card-foreground", // base styles from globals.css for glass
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLHeadingElement, // Changed to HTMLHeadingElement for semantic correctness
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  // Assuming CardTitle is used for h-tags, apply heading styles from globals.css
  // Defaulting to h3 style, adjust as needed or pass specific heading tag
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight", // Default ShadCN title
      // Apple-like heading style: font-weight: 600; letter-spacing: -0.02em;
      // These are now applied globally in globals.css to h1-h6
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement, // Changed to HTMLParagraphElement
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



==================================================
File: src/components/ui/chart.tsx
==================================================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



==================================================
File: src/components/ui/checkbox.tsx
==================================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



==================================================
File: src/components/ui/dialog.tsx
==================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



==================================================
File: src/components/ui/dropdown-menu.tsx
==================================================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



==================================================
File: src/components/ui/form.tsx
==================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



==================================================
File: src/components/ui/input.tsx
==================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



==================================================
File: src/components/ui/label.tsx
==================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



==================================================
File: src/components/ui/menubar.tsx
==================================================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}



==================================================
File: src/components/ui/popover.tsx
==================================================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



==================================================
File: src/components/ui/progress.tsx
==================================================

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & { indicatorClassName?: string }
>(({ className, value, indicatorClassName, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className={cn("h-full w-full flex-1 bg-primary transition-all", indicatorClassName)}
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



==================================================
File: src/components/ui/radio-group.tsx
==================================================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



==================================================
File: src/components/ui/scroll-area.tsx
==================================================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



==================================================
File: src/components/ui/select.tsx
==================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



==================================================
File: src/components/ui/separator.tsx
==================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



==================================================
File: src/components/ui/sheet.tsx
==================================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



==================================================
File: src/components/ui/sidebar.tsx
==================================================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



==================================================
File: src/components/ui/skeleton.tsx
==================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }



==================================================
File: src/components/ui/slider.tsx
==================================================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



==================================================
File: src/components/ui/switch.tsx
==================================================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



==================================================
File: src/components/ui/table.tsx
==================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



==================================================
File: src/components/ui/tabs.tsx
==================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



==================================================
File: src/components/ui/textarea.tsx
==================================================
import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};



==================================================
File: src/components/ui/toast.tsx
==================================================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



==================================================
File: src/components/ui/toaster.tsx
==================================================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



==================================================
File: src/components/ui/tooltip.tsx
==================================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



==================================================
File: src/components/visa/chat-panel.tsx
==================================================

'use client';

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Loader2, User } from 'lucide-react';
import { JapaGenieLogo } from '@/components/icons/JapaGenieLogo';
import type { VisaRecommendationOutput } from '@/ai/flows/visa-recommendation';
import type { GeneralChatOutput, GeneralChatInput } from '@/ai/flows/general-chat-flow';

interface ClientMessage {
  id: string;
  role: 'user' | 'model';
  content: string;
  senderIcon: React.ReactNode;
  isError?: boolean;
}

interface ChatPanelProps {
  onNewRecommendation: (recommendations: VisaRecommendationOutput | null) => void;
  setVisaLoading: (loading: boolean) => void;
  setVisaError: (error: string | null) => void;
  setWebAnalysisContext: (context: string | null) => void;
}

export function ChatPanel({ onNewRecommendation, setVisaLoading, setVisaError, setWebAnalysisContext }: ChatPanelProps) {
  const [currentMessage, setCurrentMessage] = useState<string>('');
  const [chatMessages, setChatMessages] = useState<ClientMessage[]>([]);
  const [isSending, setIsSending] = useState<boolean>(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (scrollAreaRef.current) {
      const viewport = scrollAreaRef.current.querySelector('div[data-radix-scroll-area-viewport]');
      if (viewport) {
        viewport.scrollTop = viewport.scrollHeight;
      }
    }
  }, [chatMessages]);

  const handleSubmit = async (e?: React.FormEvent<HTMLFormElement>) => {
    e?.preventDefault();
    if (!currentMessage.trim()) return;

    const userMessage: ClientMessage = {
      id: Date.now().toString() + 'user',
      role: 'user',
      content: currentMessage,
      senderIcon: <User className="h-5 w-5" />,
    };
    setChatMessages(prev => [...prev, userMessage]);
    const messageToSend = currentMessage;
    setCurrentMessage('');
    setIsSending(true);
    setVisaError(null);
    setWebAnalysisContext(null);

    const historyForAI: GeneralChatInput['chatHistory'] = chatMessages
      .filter(msg => !msg.isError)
      .map(msg => ({
        role: msg.role,
        parts: [{ text: msg.content }],
    }));
    
    try {
      const { generalChatAction } = await import('@/app/actions');
      const result = await generalChatAction({
        chatHistory: historyForAI,
        currentMessage: messageToSend,
      });

      if (result.success && result.data) {
        const aiResponse: ClientMessage = {
          id: Date.now().toString() + 'ai',
          role: 'model',
          content: result.data.conversationalReply,
          senderIcon: <JapaGenieLogo className="h-5 w-5" />, 
        };
        setChatMessages(prev => [...prev, aiResponse]);

        if (result.data.visaRecommendations && result.data.visaRecommendations.length > 0) {
          onNewRecommendation(result.data.visaRecommendations as VisaRecommendationOutput);
        } else {
           onNewRecommendation(null);
        }

        if (result.data.webAnalysisContext) {
          setWebAnalysisContext(result.data.webAnalysisContext);
        } else {
          setWebAnalysisContext(null);
        }
        
        setVisaLoading(false); 
      } else {
        const errorResponse: ClientMessage = {
          id: Date.now().toString() + 'error',
          role: 'model',
          content: `Error: ${result.error || "Failed to get a response."}`,
          senderIcon: <JapaGenieLogo className="h-5 w-5" />, 
          isError: true,
        };
        setChatMessages(prev => [...prev, errorResponse]);
        setVisaError(result.error || "Failed to get a response.");
        setVisaLoading(false);
      }
    } catch (error) {
       const criticalErrorResponse: ClientMessage = {
          id: Date.now().toString() + 'critError',
          role: 'model',
          content: `An unexpected error occurred: ${error instanceof Error ? error.message : String(error)}`,
          senderIcon: <JapaGenieLogo className="h-5 w-5" />, 
          isError: true,
        };
        setChatMessages(prev => [...prev, criticalErrorResponse]);
        setVisaError(error instanceof Error ? error.message : "An unexpected error occurred.");
        setVisaLoading(false);
    }
    setIsSending(false);
  };

  return (
    <Card className="h-full flex flex-col shadow-xl bg-card border border-border/50">
      <CardHeader>
        <CardTitle className="text-2xl text-primary flex items-center">
          <JapaGenieLogo className="h-7 w-7 mr-2" /> Japa Genie Chat
        </CardTitle>
        <CardDescription className="text-muted-foreground">
          Chat with your seasoned visa coach. Ask questions, for visa guidance, or for web-researched insights.
        </CardDescription>
      </CardHeader>
      
      <CardContent className="flex-grow flex flex-col gap-4 overflow-hidden">
        <ScrollArea className="h-[300px] sm:h-auto sm:flex-grow w-full rounded-md border border-border/70 p-4 bg-background" ref={scrollAreaRef}>
          {chatMessages.length === 0 && (
            <p className="text-sm text-muted-foreground text-center py-4">
              Ask Japa Genie anything about your relocation journey!
              <br />For example: "What are the current student visa success rates for Germany?"
            </p>
          )}
          <div className="space-y-4">
            {chatMessages.map((msg) => (
              <div key={msg.id} className={`flex items-start gap-2.5 ${msg.role === 'user' ? 'justify-end' : ''}`}>
                {msg.role === 'model' && (
                  <Avatar className="h-7 w-7">
                    <AvatarFallback className={`flex items-center justify-center text-sm ${msg.isError ? 'bg-destructive/20' : 'bg-primary/10'}`}>
                      {msg.senderIcon}
                    </AvatarFallback>
                  </Avatar>
                )}
                <div className={`p-3 rounded-lg max-w-[85%] shadow-sm break-words ${
                  msg.role === 'user' ? 'bg-primary text-primary-foreground rounded-br-none' : 
                  msg.isError ? 'bg-destructive/80 text-destructive-foreground rounded-bl-none' : 
                  'bg-muted text-muted-foreground border border-border/50 rounded-bl-none'
                }`}>
                  <p className="text-xs font-semibold mb-0.5 opacity-80">{msg.role === 'user' ? 'You' : 'Japa Genie'}</p>
                  <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
                </div>
                {msg.role === 'user' && (
                  <Avatar className="h-7 w-7">
                    <AvatarFallback className="bg-secondary text-secondary-foreground flex items-center justify-center text-sm">
                      {msg.senderIcon}
                    </AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))}
          </div>
        </ScrollArea>
      </CardContent>

      <CardFooter className="border-t border-border/50 pt-4">
        <form onSubmit={handleSubmit} className="flex w-full items-start gap-2">
          <Textarea
            placeholder="Type your message to Japa Genie..."
            value={currentMessage}
            onChange={(e) => setCurrentMessage(e.target.value)}
            rows={1}
            className="flex-grow resize-none bg-background border-border focus:border-primary min-h-[40px]"
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit();
              }
            }}
            disabled={isSending}
          />
          <Button type="submit" className="bg-accent hover:bg-accent/90 text-accent-foreground h-[40px]" disabled={isSending || !currentMessage.trim()}>
            {isSending ? <Loader2 className="h-4 w-4 animate-spin" /> : <User className="h-4 w-4" />}
            <span className="sr-only">Send</span>
          </Button>
        </form>
      </CardFooter>
    </Card>
  );
}



==================================================
File: src/components/visa/document-progress-map.tsx
==================================================

'use client';

import type { SVGProps } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import type { DocumentProgress, DocumentStatusType } from '@/types/document-progress';
import { Clock, UploadCloud, CheckCircle2, XCircle, FileText, AlertTriangle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface StatusAttributes {
  icon: React.ReactElement<SVGProps<SVGSVGElement>>;
  badgeVariant: 'outline' | 'default' | 'destructive' | 'secondary';
  badgeClassName: string;
  textColorClassName: string;
}

const getStatusAttributes = (status: DocumentStatusType): StatusAttributes => {
  switch (status) {
    case 'pending':
      return { 
        icon: <Clock className="h-5 w-5 text-muted-foreground" />, 
        badgeVariant: 'outline',
        badgeClassName: 'border-dashed border-muted-foreground/50 text-muted-foreground',
        textColorClassName: 'text-muted-foreground',
      };
    case 'submitted':
      return { 
        icon: <UploadCloud className="h-5 w-5 text-primary" />, 
        badgeVariant: 'secondary', 
        badgeClassName: 'bg-primary/10 text-primary border-primary/30',
        textColorClassName: 'text-primary',
      };
    case 'approved':
      return { 
        icon: <CheckCircle2 className="h-5 w-5 text-accent" />, 
        badgeVariant: 'default',
        badgeClassName: 'bg-accent text-accent-foreground hover:bg-accent/90 border-transparent',
        textColorClassName: 'text-accent',
      };
    case 'rejected':
      return { 
        icon: <XCircle className="h-5 w-5 text-destructive" />, 
        badgeVariant: 'destructive',
        badgeClassName: 'bg-destructive/10 text-destructive border-destructive/30',
        textColorClassName: 'text-destructive',
      };
    default:
      return { 
        icon: <AlertTriangle className="h-5 w-5 text-muted-foreground" />, 
        badgeVariant: 'outline',
        badgeClassName: 'border-muted-foreground/50 text-muted-foreground',
        textColorClassName: 'text-muted-foreground',
      };
  }
};

interface DocumentProgressMapProps {
  documents: DocumentProgress[];
}

export function DocumentProgressMap({ documents }: DocumentProgressMapProps) {
  if (!documents || documents.length === 0) {
    return (
      <Card className="shadow-lg bg-card border border-border/50">
        <CardHeader>
          <CardTitle className="text-xl text-primary">Document Submission Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center py-10 text-center">
            <FileText className="h-12 w-12 text-muted-foreground mb-4" />
            <p className="text-lg font-medium text-muted-foreground">No documents to track.</p>
            <p className="text-sm text-muted-foreground">Your document list will appear here once available.</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  const approvedCount = documents.filter(doc => doc.status === 'approved').length;
  const totalCount = documents.length;
  const progressPercentage = totalCount > 0 ? (approvedCount / totalCount) * 100 : 0;

  return (
    <Card className="shadow-xl bg-card border border-border/50">
      {/* CardHeader removed to be included in parent page if needed for title flexibility */}
      <CardContent className="space-y-6 pt-6"> {/* Added pt-6 since CardHeader might be omitted */}
        <div>
          <div className="mb-2 flex justify-between items-center">
            <span className="text-sm font-medium text-foreground">Overall Approval Progress</span>
            <span className="text-sm text-muted-foreground">{approvedCount} of {totalCount} approved</span>
          </div>
          <Progress value={progressPercentage} className="w-full h-3 rounded-full bg-muted" indicatorClassName="bg-accent" aria-label={`Overall document approval progress: ${Math.round(progressPercentage)}%`} />
          <p className="text-xs text-muted-foreground mt-1 text-right">{Math.round(progressPercentage)}% Approved</p>
        </div>
        
        <div className="space-y-3">
          {documents.map((doc) => {
            const { icon, badgeVariant, badgeClassName, textColorClassName } = getStatusAttributes(doc.status);
            return (
              <div key={doc.id} className="flex items-start p-3 border border-border/30 rounded-lg bg-background hover:shadow-md transition-shadow duration-200 space-x-3">
                <div className="shrink-0 pt-0.5">{icon}</div>
                <div className="flex-grow min-w-0">
                  <p className={`font-medium text-foreground truncate`} title={doc.name}>{doc.name}</p>
                  {doc.details && <p className={cn("text-xs truncate", textColorClassName)} title={doc.details}>{doc.details}</p>}
                </div>
                <Badge variant={badgeVariant} className={cn("capitalize ml-2 shrink-0 text-xs px-2 py-0.5", badgeClassName)}>{doc.status}</Badge>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
}



==================================================
File: src/components/visa/success-rate-visual.tsx
==================================================

'use client';
import { cn } from '@/lib/utils';

interface SuccessRateVisualProps {
  rate: number;
  className?: string;
}

export function SuccessRateVisual({ rate, className }: SuccessRateVisualProps) {
  const circumference = 2 * Math.PI * 45; // 2 * pi * radius
  const offset = circumference - (rate / 100) * circumference;

  return (
    <div className={cn("relative h-28 w-28", className)}>
      <svg className="w-full h-full" viewBox="0 0 100 100">
        {/* Background circle */}
        <circle
          className="text-muted/20"
          strokeWidth="10"
          stroke="currentColor"
          fill="transparent"
          r="45"
          cx="50"
          cy="50"
        />
        {/* Progress circle */}
        <circle
          className="text-accent drop-shadow-[0_2px_2px_rgba(245,158,11,0.5)]"
          strokeWidth="10"
          strokeDasharray={circumference}
          strokeDashoffset={offset}
          strokeLinecap="round"
          stroke="currentColor"
          fill="transparent"
          r="45"
          cx="50"
          cy="50"
          transform="rotate(-90 50 50)"
          style={{ transition: 'stroke-dashoffset 0.8s ease-out' }}
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-3xl font-bold text-foreground">{rate}<span className="text-xl opacity-70">%</span></span>
        <span className="text-xs text-muted-foreground -mt-1 tracking-wider">Success</span>
      </div>
    </div>
  );
}



==================================================
File: src/components/visa/visa-card.tsx
==================================================

import type { VisaRecommendationOutput } from "@/ai/flows/visa-recommendation";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { DollarSign, School, Briefcase, Clock, Lightbulb } from "lucide-react";
import { SuccessRateVisual } from "./success-rate-visual";
import { Separator } from "@/components/ui/separator";

type VisaCardProps = {
  visa: VisaRecommendationOutput[0]; // This refers to one item from the array
};

export function VisaCard({ visa }: VisaCardProps) {
  return (
    <Card className="w-full shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden">
      <CardHeader className="pb-4">
        <CardTitle className="text-xl font-semibold text-primary">{visa.name}</CardTitle>
        <div className="text-sm text-muted-foreground">
          Processing Time: <Badge variant="secondary" className="ml-1"><Clock className="inline-block h-4 w-4 mr-1" />{visa.processingTime}</Badge>
        </div>
      </CardHeader>
      <CardContent className="flex flex-col md:flex-row items-center gap-6">
        <div className="md:w-2/3 space-y-3">
          <div className="flex items-center text-sm">
            <DollarSign className="h-5 w-5 mr-2 text-accent flex-shrink-0" />
            <span>Cost: <span className="font-medium">${visa.cost.usd.toLocaleString()} USD</span></span>
          </div>
          <div>
            <h4 className="font-medium mb-1.5 text-md">Key Requirements:</h4>
            <ul className="list-none space-y-1.5 text-sm text-muted-foreground">
              <li className="flex items-start">
                <School className="h-5 w-5 mr-2 mt-0.5 text-primary flex-shrink-0" />
                <span><span className="font-medium text-foreground/80">Education:</span> {visa.requirements.minimumEducation}</span>
              </li>
              <li className="flex items-start">
                <Briefcase className="h-5 w-5 mr-2 mt-0.5 text-primary flex-shrink-0" />
                <span><span className="font-medium text-foreground/80">Experience:</span> {visa.requirements.minimumWorkExperience}</span>
              </li>
            </ul>
          </div>
        </div>
        <div className="md:w-1/3 flex items-center justify-center md:border-l md:pl-6 border-border/70">
          <SuccessRateVisual rate={visa.successRate} />
        </div>
      </CardContent>
      <Separator className="my-0" />
      <CardFooter className="bg-muted/30 p-4">
        <div className="flex items-start text-sm">
          <Lightbulb className="h-5 w-5 mr-3 mt-0.5 text-accent flex-shrink-0" />
          <p className="text-muted-foreground">
            <span className="font-semibold text-foreground">AI Coach's Note:</span>{' '}
            {visa.reason ? visa.reason : "Japa Genie is still analyzing this option. More details might be available if you ask further."}
          </p>
        </div>
      </CardFooter>
    </Card>
  );
}



==================================================
File: src/components/visa/visa-display-panel.tsx
==================================================

import type { VisaRecommendationOutput } from "@/ai/flows/visa-recommendation";
import { VisaCard } from "./visa-card";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Loader2, Info, MessageSquareText, Globe, FileText } from "lucide-react";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Badge } from "@/components/ui/badge";

// Mock data for progress display - in a real app this would come from state management
const documentStatus = {
  total: 7,
  approved: 1,
};

interface VisaDisplayPanelProps {
  recommendations: VisaRecommendationOutput | null;
  isLoading: boolean;
  error: string | null;
  webAnalysisContext?: string | null;
}

export function VisaDisplayPanel({ recommendations, isLoading, error, webAnalysisContext }: VisaDisplayPanelProps) {
  const progressPercentage = Math.round((documentStatus.approved / documentStatus.total) * 100);

  let content;

  if (isLoading) {
    content = (
      <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
        <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
        <p className="text-lg">Japa Genie is working...</p>
        <p>Fetching visa information or insights.</p>
      </div>
    );
  } else if (error) {
    content = (
      <div className="flex flex-col items-center justify-center h-full text-destructive p-4 text-center">
        <Info className="h-12 w-12 mb-4" />
        <p className="text-lg font-semibold">Oops! Something went wrong.</p>
        <p className="text-sm">{error}</p>
      </div>
    );
  } else if (recommendations && recommendations.length > 0) {
    content = (
      <div className="space-y-6">
        {webAnalysisContext && (
          <Card className="bg-muted/30 border-primary/30">
            <CardHeader className="pb-2">
              <CardTitle className="text-md text-primary flex items-center">
                <Globe className="h-5 w-5 mr-2" /> Web Analysis Context
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-xs text-muted-foreground whitespace-pre-wrap">{webAnalysisContext}</p>
            </CardContent>
          </Card>
        )}
        {recommendations.map((visa, index) => (
          <VisaCard key={index} visa={visa} />
        ))}
      </div>
    );
  } else if (webAnalysisContext) { // Only web context, no visa recommendations
     content = (
      <Card className="bg-muted/30 border-primary/30">
        <CardHeader className="pb-2">
          <CardTitle className="text-md text-primary flex items-center">
            <Globe className="h-5 w-5 mr-2" /> Web Analysis Context
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground whitespace-pre-wrap">{webAnalysisContext}</p>
        </CardContent>
      </Card>
    );
  }
  else { // No recommendations, not loading, no error, no web context
    content = (
      <div className="flex flex-col items-center justify-center h-full text-muted-foreground p-4 text-center">
        <MessageSquareText className="h-16 w-16 mb-6 text-primary/70" />
        <p className="text-lg font-medium">Visa Insights & Recommendations</p>
        <p className="text-sm">
          Key details from your chat with Japa Genie, including any visa recommendations or web analysis, will appear here.
        </p>
        <p className="text-sm mt-2">
          Try asking: "Can you help me find visa options?" or "What are current success rates for Canadian study permits?"
        </p>
      </div>
    );
  }

  return (
    <Card className="h-full flex flex-col shadow-xl bg-card border border-border/50">
      <CardHeader className="flex flex-row justify-between items-start">
        <div>
          <CardTitle className="text-2xl text-primary">Japa Genie Insights</CardTitle>
          <CardDescription className="text-muted-foreground">
            Key points, web-researched info, and visa recommendations from your conversation.
          </CardDescription>
        </div>
        <div className="flex items-center gap-2 ml-4 shrink-0">
          <Badge variant="outline" className="text-sm font-semibold border-amber-500 text-amber-600">
            {progressPercentage}%
          </Badge>
          <Button asChild size="sm" className="bg-amber-500 hover:bg-amber-600 text-black font-semibold">
            <Link href="/documents">
              <FileText className="h-4 w-4 mr-2" />
              Doc Tracker
            </Link>
          </Button>
        </div>
      </CardHeader>
      <CardContent className="flex-grow overflow-hidden">
        <ScrollArea className="h-full pr-4">
          {content}
        </ScrollArea>
      </CardContent>
    </Card>
  );
}



==================================================
File: src/hooks/use-mobile.tsx
==================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



==================================================
File: src/hooks/use-toast.ts
==================================================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



==================================================
File: src/lib/utils.ts
==================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



==================================================
File: src/services/visa-options.ts
==================================================

/**
 * Represents the cost of a visa.
 */
export interface VisaCost {
  /**
   * The cost in USD.
   */
  usd: number;
}

/**
 * Represents the requirements for a visa.
 */
export interface VisaRequirements {
  /**
   * The minimum education level required.
   */
  minimumEducation: string;
  /**
   * The minimum work experience required.
   */
  minimumWorkExperience: string;
}

/**
 * Represents a visa option.
 */
export interface VisaOption {
  /**
   * The name of the visa.
   */
  name: string;
  /**
   * The cost of the visa.
   */
  cost: VisaCost;
  /**
   * The requirements for the visa.
   */
  requirements: VisaRequirements;
  /**
   * The processing time for the visa.
   */
  processingTime: string;
  /**
   * The estimated success rate for a candidate with a similar profile, as a percentage (e.g., 85 for 85%).
   */
  successRate: number;
}

/**
 * Asynchronously retrieves visa options based on a given budget and background.
 *
 * @param budget The budget for the visa.
 * @param background The background of the user.
 * @returns A promise that resolves to an array of VisaOption objects.
 */
export async function getVisaOptions(budget: number, background: string): Promise<VisaOption[]> {
  // TODO: Implement this by calling a real API or database.
  // The data below is placeholder/mock data.

  // Simulating some filtering based on budget, though very basic
  const allVisaOptions: VisaOption[] = [
    {
      name: 'Canadian Tech Talent Stream',
      cost: {
        usd: 3500
      },
      requirements: {
        minimumEducation: 'Bachelor\'s Degree in STEM',
        minimumWorkExperience: '3 years in a high-demand tech role'
      },
      processingTime: '4-6 months',
      successRate: 85,
    },
    {
      name: 'UK Global Talent Visa',
      cost: {
        usd: 800
      },
      requirements: {
        minimumEducation: 'Endorsement from a recognized UK body',
        minimumWorkExperience: 'Varies (leader or potential leader in field)'
      },
      processingTime: '3-8 weeks (fast track available)',
      successRate: 92,
    },
    {
      name: 'German Skilled Worker Visa',
      cost: {
        usd: 100
      },
      requirements: {
        minimumEducation: 'Vocational training or University Degree (recognized in Germany)',
        minimumWorkExperience: '2 years relevant experience'
      },
      processingTime: '1-3 months',
      successRate: 88,
    },
    {
      name: 'Australian Student Visa (Subclass 500)',
      cost: {
        usd: 450
      },
      requirements: {
        minimumEducation: 'Enrolment in a CRICOS-registered course',
        minimumWorkExperience: 'Not primarily for work'
      },
      processingTime: 'Varies (typically 1-4 months)',
      successRate: 78,
    },
    {
      name: 'USA H-1B Visa (Specialty Occupations)',
      cost: {
        usd: 2500 // Base fees, can be higher with legal costs
      },
      requirements: {
        minimumEducation: 'Bachelor\'s degree or equivalent in a specialized field',
        minimumWorkExperience: 'Varies, job offer required'
      },
      processingTime: 'Lottery system; if selected, 3-12 months',
      successRate: 15, // Reflects lottery nature
    },
     {
      name: 'Netherlands Highly Skilled Migrant Program',
      cost: {
        usd: 350
      },
      requirements: {
        minimumEducation: 'Employment contract with a recognized sponsor',
        minimumWorkExperience: 'Salary threshold must be met'
      },
      processingTime: '2-4 weeks',
      successRate: 95,
    }
  ];

  // Simple filter example: return visas that are less than or equal to the budget
  // And a very naive background check
  const backgroundLower = background.toLowerCase();
  return allVisaOptions.filter(visa => {
    let matchesBudget = visa.cost.usd <= budget;
    let matchesBackground = true; // Default to true

    if (backgroundLower.includes("student") || backgroundLower.includes("study")) {
      matchesBackground = visa.name.toLowerCase().includes("student") || visa.name.toLowerCase().includes("study");
    } else if (backgroundLower.includes("tech") || backgroundLower.includes("software") || backgroundLower.includes("engineer")) {
       matchesBackground = visa.name.toLowerCase().includes("tech") || visa.name.toLowerCase().includes("talent") || visa.name.toLowerCase().includes("skilled");
    }
    
    return matchesBudget && matchesBackground;
  }).slice(0, 3); // Return at most 3 matches for brevity in chat
}



==================================================
File: src/services/web-fetcher.ts
==================================================

import axios from 'axios';

const AXIOS_TIMEOUT = 15000; // 15 seconds timeout

/**
 * Fetches the raw HTML content of a webpage.
 * @param url The URL of the webpage to fetch.
 * @returns A promise that resolves to the HTML content as a string.
 * @throws Will throw an error if the request fails or the URL is invalid.
 */
export async function fetchWebpageHtml(url: string): Promise<string> {
  try {
    const response = await axios.get(url, {
      headers: {
        // Some websites might block requests without a common user-agent
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: AXIOS_TIMEOUT, // Added timeout
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
        console.error(`Timeout fetching URL ${url} after ${AXIOS_TIMEOUT / 1000} seconds.`);
        throw new Error(`Failed to fetch content from ${url} due to a timeout.`);
      }
      console.error(`Error fetching URL ${url}: ${error.message}`);
      throw new Error(`Failed to fetch content from ${url}. Status: ${error.response?.status}`);
    } else {
      console.error(`An unexpected error occurred while fetching ${url}:`, error);
      throw new Error(`An unexpected error occurred while fetching ${url}.`);
    }
  }
}



==================================================
File: src/types/document-progress.ts
==================================================

export type DocumentStatusType = 'pending' | 'submitted' | 'approved' | 'rejected';

export interface DocumentProgress {
  id: string;
  name: string;
  status: DocumentStatusType;
  details?: string; // Optional details, e.g., "Submitted on 2024-07-15" or "Rejection reason: blurry scan"
}



==================================================
File: tailwind.config.ts
==================================================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
        primary: 'hsl(var(--primary))',
        secondary: 'hsl(var(--secondary))',
        light: '#f5f5f7',
        dark: '#1d1d1f',
        'glass-light': 'rgba(255, 255, 255, 0.7)',
        'glass-dark': 'rgba(255, 255, 255, 0.1)',
        'genie-gold': '#FDD20E',

  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',

  			card: 'hsl(var(--card))',
  			'card-foreground': 'hsl(var(--card-foreground))',

  			popover: 'hsl(var(--popover))',
  			'popover-foreground': 'hsl(var(--popover-foreground))',

  			'primary-foreground': 'hsl(var(--primary-foreground))',
  			'secondary-foreground': 'hsl(var(--secondary-foreground))',

  			muted: 'hsl(var(--muted))',
  			'muted-foreground': 'hsl(var(--muted-foreground))',

  			accent: 'hsl(var(--accent))',
  			'accent-foreground': 'hsl(var(--accent-foreground))',

  			destructive: 'hsl(var(--destructive))',
  			'destructive-foreground': 'hsl(var(--destructive-foreground))',

  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',

  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
      fontFamily: {
        sans: [
          '-apple-system',
          'BlinkMacSystemFont',
          '"Segoe UI"',
          'Roboto',
          '"Helvetica Neue"',
          'Arial',
          'sans-serif'
        ]
      },
  		keyframes: {
  			'accordion-down': {
  				from: { height: '0' },
  				to: { height: 'var(--radix-accordion-content-height)' }
  			},
  			'accordion-up': {
  				from: { height: 'var(--radix-accordion-content-height)' },
  				to: { height: '0' }
  			},
        'wiggle': {
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        },
        'fly-across': {
          '0%': {
            transform: 'translateX(-30%) translateY(130%) scale(0.4) rotate(-40deg)',
            opacity: '0',
          },
          '20%': {
            opacity: '1',
            transform: 'translateX(10%) translateY(70%) scale(0.6) rotate(-20deg)',
          },
          '80%': {
            opacity: '1',
            transform: 'translateX(90%) translateY(-10%) scale(0.9) rotate(10deg)',
          },
          '100%': {
            transform: 'translateX(130%) translateY(-40%) scale(1) rotate(25deg)',
            opacity: '0',
          },
        },
        'pulse-glow': {
          '0%, 100%': {
            boxShadow: '0 0 5px hsla(var(--accent), 0.3), 0 0 10px hsla(var(--accent), 0.2), 0 0 0 0px hsla(var(--accent), 0.3)'
          },
          '50%': {
            boxShadow: '0 0 10px hsla(var(--accent), 0.5), 0 0 20px hsla(var(--accent), 0.3), 0 0 0 5px hsla(var(--accent), 0)'
          },
        },
        'shine': {
          '0%': { 'background-position': '-200% center' },
          '20%': { 'background-position': '200% center' },
          '100%': { 'background-position': '200% center' },
        },
        'throb': {
          '0%, 100%': { transform: 'scale(1)' },
          '50%': { transform: 'scale(1.05)' }
        }
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out',
        'wiggle': 'wiggle 3s ease-in-out infinite',
        'fly-across': 'fly-across 18s linear infinite',
        'pulse-glow': 'pulse-glow 2.5s infinite ease-in-out',
        'shine': 'shine 8s ease-in-out infinite',
        'throb': 'throb 1.5s ease-in-out infinite'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;



==================================================
File: tsconfig.json
==================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
